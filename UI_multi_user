import { useState, useRef, useEffect } from "react";

type Message = {
  from: "user" | "bot";
  text: string;
  confidence?: number;
  expandAvailable?: boolean;
  sources?: any[];
};

type AnalysisResult = {
  id: number;
  toolId: string;
  toolTitle: string;
  document: string;
  documentId: string;
  analysis: string;
  confidence?: number;
  timestamp: string;
  sources?: any[];
  status: 'completed' | 'failed' | 'processing';
  extractedData?: any;
  warnings?: string[];
  analysisType: string;
};

type DocumentAnalysis = {
  id: string;
  filename: string;
  uploadedAt: string;
  pagesProcessed: number;
  analysisResults: {
    summary?: string;
    clauses?: string;
    risks?: string;
    timeline?: string;
    obligations?: string;
    missingClauses?: string;
  };
  lastAnalyzed?: string;
  confidence?: number;
};

type User = {
  username: string;
  email?: string;
  role: string;
  subscription_tier: string;
  loginTime: string;
};

const analysisTools = [
  {
    id: 'comprehensive',
    title: 'Complete Document Analysis',
    description: 'Run all analysis tools at once for comprehensive insights',
    prompt: 'Provide a comprehensive legal analysis including: summary, key clauses, risks, timeline, obligations, and missing clauses.',
    icon: 'üîç',
    category: 'Complete',
    idealFor: ['Any legal document'],
    riskLevel: 'low',
    isComprehensive: true
  },
  {
    id: 'summarize',
    title: 'Legal Document Summarization',
    description: 'Get plain English summaries while keeping legal tone intact',
    prompt: 'Summarize this legal document in plain English, keeping the legal tone intact. Highlight purpose, parties involved, and key terms.',
    icon: 'üìÑ',
    category: 'Analysis',
    idealFor: ['Contracts', 'Case briefs', 'Discovery documents'],
    riskLevel: 'low'
  },
  {
    id: 'extract-clauses',
    title: 'Key Clause Extraction',
    description: 'Extract termination, indemnification, liability clauses automatically',
    prompt: 'Extract and list the clauses related to termination, indemnification, liability, governing law, and confidentiality.',
    icon: 'üìã',
    category: 'Extraction',
    idealFor: ['NDAs', 'Employment agreements', 'Service contracts'],
    riskLevel: 'low'
  },
  {
    id: 'missing-clauses',
    title: 'Missing Clause Detection',
    description: 'Flag commonly expected clauses that might be missing',
    prompt: 'Analyze this contract and flag any commonly expected legal clauses that are missing, such as limitation of liability or dispute resolution.',
    icon: '‚ö†Ô∏è',
    category: 'Risk Assessment',
    idealFor: ['Startup contracts', 'Vendor agreements'],
    riskLevel: 'medium'
  },
  {
    id: 'risk-flagging',
    title: 'Legal Risk Flagging',
    description: 'Identify clauses that may pose legal risks to signing party',
    prompt: 'Identify any clauses that may pose legal risks to the signing party, such as unilateral termination, broad indemnity, or vague obligations.',
    icon: 'üö©',
    category: 'Risk Assessment',
    idealFor: ['Lease agreements', 'IP transfer agreements'],
    riskLevel: 'high'
  },
  {
    id: 'timeline-extraction',
    title: 'Timeline & Deadline Extraction',
    description: 'Extract all dates, deadlines, and renewal periods',
    prompt: 'Extract and list all dates, deadlines, renewal periods, and notice periods mentioned in this document.',
    icon: 'üìÖ',
    category: 'Extraction',
    idealFor: ['Leases', 'Licensing deals'],
    riskLevel: 'low'
  },
  {
    id: 'obligations',
    title: 'Obligation Summary',
    description: 'List all required actions and obligations with deadlines',
    prompt: 'List all actions or obligations the signing party is required to perform, along with associated deadlines or conditions.',
    icon: '‚úÖ',
    category: 'Analysis',
    idealFor: ['Service contracts', 'Compliance agreements'],
    riskLevel: 'low'
  }
];

// Predefined test accounts - SIMPLIFIED to Free/Premium only
const TEST_ACCOUNTS = [
  { username: 'demo', password: 'demo123', email: 'demo@legalassistant.ai', role: 'user', subscription_tier: 'free' },
  { username: 'tester1', password: 'test123', email: 'tester1@company.com', role: 'user', subscription_tier: 'premium' },
  { username: 'tester2', password: 'test456', email: 'tester2@company.com', role: 'user', subscription_tier: 'free' },
  { username: 'lawyer1', password: 'legal123', email: 'lawyer1@lawfirm.com', role: 'user', subscription_tier: 'premium' }
];

export default function EnhancedLegalAssistantWithAuth() {
  // Authentication state
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [showLogin, setShowLogin] = useState(true);
  const [loginForm, setLoginForm] = useState({ username: '', password: '' });
  const [loginError, setLoginError] = useState('');
  const [isLoggingIn, setIsLoggingIn] = useState(false);

  // Chat state
  const [messages, setMessages] = useState<Message[]>([]);
  const [input, setInput] = useState("");
  const [isLoading, setIsLoading] = useState(false);
  const [responseStyle, setResponseStyle] = useState("balanced");
  const [sessionId, setSessionId] = useState("");
  const messagesEndRef = useRef<null | HTMLDivElement>(null);

  // Document analysis state
  const [activeTab, setActiveTab] = useState("chat");
  const [uploadedFile, setUploadedFile] = useState<File | null>(null);
  const [analysisResults, setAnalysisResults] = useState<AnalysisResult[]>([]);
  const [documentAnalyses, setDocumentAnalyses] = useState<DocumentAnalysis[]>([]);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [selectedDocumentForAnalysis, setSelectedDocumentForAnalysis] = useState<string | null>(null);

  // Multi-document upload support
  const [uploadQueue, setUploadQueue] = useState<File[]>([]);
  const [currentlyUploading, setCurrentlyUploading] = useState<File | null>(null);
  const [uploadResults, setUploadResults] = useState<any[]>([]);

  // Backend configuration state
  const [backendUrl, setBackendUrl] = useState("http://18.232.139.244:8000");
  const [apiToken, setApiToken] = useState("");
  const [isBackendConfigured, setIsBackendConfigured] = useState(false);
  const [connectionError, setConnectionError] = useState("");
  const [backendCapabilities, setBackendCapabilities] = useState({
    hasChat: false,
    hasDocumentAnalysis: false,
    enhancedRag: false,
    userContainers: false,
    version: "",
    subscriptionTier: "free"
  });

  // Unified backend settings
  const [searchScope, setSearchScope] = useState("all");
  const [useEnhancedRag, setUseEnhancedRag] = useState(true);
  const [userDocuments, setUserDocuments] = useState([]);

  // Check for existing session on component mount
  useEffect(() => {
    const savedUser = localStorage.getItem('legalAssistantUser');
    const savedToken = localStorage.getItem('legalAssistantToken');
    
    if (savedUser && savedToken) {
      try {
        const user = JSON.parse(savedUser);
        setCurrentUser(user);
        setApiToken(savedToken);
        setIsLoggedIn(true);
        setShowLogin(false);
        
        // Initialize welcome message
        setMessages([{
          from: "bot", 
          text: `Welcome back, ${user.username}! I'm your AI Legal Assistant with Smart RAG capabilities. How can I help you today?`
        }]);
      } catch (error) {
        console.error('Error loading saved session:', error);
        handleLogout();
      }
    }
  }, []);

  // Auto-configure backend when logged in
  useEffect(() => {
    if (isLoggedIn && apiToken) {
      testConnectionWithUrl(backendUrl);
    }
  }, [isLoggedIn, apiToken]);

  useEffect(() => {
    if (isBackendConfigured) {
      loadUserDocuments();
    }
  }, [isBackendConfigured, apiToken]);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" });
  }, [messages]);

  // Authentication functions
  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoggingIn(true);
    setLoginError('');

    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));

    // Check credentials against test accounts
    const account = TEST_ACCOUNTS.find(acc => 
      acc.username === loginForm.username && acc.password === loginForm.password
    );

    if (account) {
      const user: User = {
        username: account.username,
        email: account.email,
        role: account.role,
        subscription_tier: account.subscription_tier,
        loginTime: new Date().toISOString()
      };

      // Generate token based on username
      const token = `user_${account.username}_${Date.now()}`;

      setCurrentUser(user);
      setApiToken(token);
      setIsLoggedIn(true);
      setShowLogin(false);
      
      // Save to localStorage
      localStorage.setItem('legalAssistantUser', JSON.stringify(user));
      localStorage.setItem('legalAssistantToken', token);
      
      // Set welcome message
      setMessages([{
        from: "bot", 
        text: `Hello ${user.username}! Welcome to the AI Legal Assistant. You're logged in with ${user.subscription_tier} access. How can I help you today?`
      }]);

      setLoginForm({ username: '', password: '' });
    } else {
      setLoginError('Invalid username or password. Please try one of the test accounts.');
    }

    setIsLoggingIn(false);
  };

  const handleLogout = () => {
    setCurrentUser(null);
    setApiToken('');
    setIsLoggedIn(false);
    setShowLogin(true);
    setMessages([]);
    setSessionId('');
    setAnalysisResults([]);
    setDocumentAnalyses([]);
    setUserDocuments([]);
    setIsBackendConfigured(false);
    
    // Clear localStorage
    localStorage.removeItem('legalAssistantUser');
    localStorage.removeItem('legalAssistantToken');
  };

  // Simple markdown renderer
  const renderMarkdown = (text: string) => {
    return text
      .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
      .replace(/\*(.*?)\*/g, '<em>$1</em>')
      .replace(/^### (.*$)/gm, '<h3>$1</h3>')
      .replace(/^## (.*$)/gm, '<h2>$1</h2>')
      .replace(/^# (.*$)/gm, '<h1>$1</h1>')
      .replace(/\n\n/g, '</p><p>')
      .replace(/\n/g, '<br/>')
      .replace(/^/, '<p>')
      .replace(/$/, '</p>')
      .replace(/^\* (.*$)/gm, '<li>$1</li>')
      .replace(/(<li>.*<\/li>)/s, '<ul>$1</ul>')
      .replace(/^\d+\. (.*$)/gm, '<li>$1</li>')
      .replace(/(<li>.*<\/li>)/s, '<ol>$1</ol>')
      .replace(/`([^`]+)`/g, '<code>$1</code>')
      .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>');
  };

  // Backend connection functions
  const testConnectionWithUrl = async (url) => {
    if (!url) {
      alert('Please set a backend URL first');
      return;
    }
    
    setConnectionError("Testing connection...");
    
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000);

      const healthResponse = await fetch(`${url}/health`, {
        method: 'GET',
        signal: controller.signal,
        headers: {
          'Content-Type': 'application/json',
        }
      });
      
      clearTimeout(timeoutId);

      if (!healthResponse.ok) {
        throw new Error(`Backend returned ${healthResponse.status}: ${healthResponse.statusText}`);
      }

      const healthData = await healthResponse.json();
      
      if (healthData.version && healthData.version.includes("SmartRAG")) {
        setBackendCapabilities({
          hasChat: true,
          hasDocumentAnalysis: true,
          enhancedRag: healthData.components?.enhanced_rag?.enabled || false,
          userContainers: healthData.components?.user_containers?.enabled || false,
          version: healthData.version,
          subscriptionTier: currentUser?.subscription_tier || "free"
        });
        setIsBackendConfigured(true);
        setConnectionError("");
      } else {
        throw new Error("Backend doesn't support Smart RAG features");
      }
    } catch (error) {
      console.error("Failed to check backend capabilities:", error);
      setIsBackendConfigured(false);
      
      if (error.name === 'AbortError') {
        setConnectionError("Connection timeout - backend may be down or slow");
      } else if (error.message.includes('fetch') || error.name === 'TypeError') {
        setConnectionError("Cannot connect to backend - check if server is running at " + url);
      } else {
        setConnectionError(`Backend error: ${error.message}`);
      }
    }
  };

  const loadUserDocuments = async () => {
    if (!isBackendConfigured || !apiToken) return;

    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 15000);

      const response = await fetch(`${backendUrl}/user/documents`, {
        signal: controller.signal,
        headers: {
          'Authorization': `Bearer ${apiToken}`,
          'Content-Type': 'application/json'
        }
      });
      
      clearTimeout(timeoutId);
      
      if (response.ok) {
        const data = await response.json();
        setUserDocuments(data.documents || []);
        
        const docAnalyses = (data.documents || []).map(doc => ({
          id: doc.file_id,
          filename: doc.filename,
          uploadedAt: doc.uploaded_at,
          pagesProcessed: doc.pages_processed,
          analysisResults: {},
          lastAnalyzed: null,
          confidence: null
        }));
        setDocumentAnalyses(docAnalyses);
      } else {
        console.error("Failed to load user documents:", response.status, response.statusText);
      }
    } catch (error) {
      console.error("Failed to load user documents:", error);
    }
  };

  // Chat functions
  async function sendMessage(expandRequest = false) {
    if (!input.trim() || isLoading) return;

    if (!isBackendConfigured) {
      setMessages(msgs => [...msgs, { 
        from: "bot", 
        text: "Backend connection error. Please contact your administrator." 
      }]);
      return;
    }

    const userMessage: Message = { from: "user", text: input };
    setMessages((msgs) => [...msgs, userMessage]);
    const currentInput = input;
    setInput("");
    setIsLoading(true);

    try {
      const requestBody = {
        question: expandRequest ? `Please provide more detailed information about: ${currentInput}` : currentInput,
        session_id: sessionId || undefined,
        response_style: responseStyle,
        search_scope: searchScope,
        use_enhanced_rag: useEnhancedRag
      };

      const headers: any = {
        "Content-Type": "application/json",
        "Authorization": `Bearer ${apiToken}`
      };

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 30000);

      const res = await fetch(`${backendUrl}/ask`, {
        method: "POST",
        signal: controller.signal,
        headers: headers,
        body: JSON.stringify(requestBody),
      });

      clearTimeout(timeoutId);

      if (!res.ok) {
        const errorText = await res.text();
        throw new Error(`Server error ${res.status}: ${errorText || res.statusText}`);
      }

      const data = await res.json();
      
      if (data.session_id && !sessionId) {
        setSessionId(data.session_id);
      }

      const botText = data.response || data.error || "No response received from server";
      const botMessage: Message = { 
        from: "bot", 
        text: botText,
        confidence: data.confidence_score,
        expandAvailable: data.expand_available,
        sources: data.sources || []
      };
      setMessages((msgs) => [...msgs, botMessage]);
    } catch (error) {
      console.error("Chat error:", error);
      let errorMessage = "Failed to connect to server.";
      
      if (error.name === 'AbortError') {
        errorMessage = "Request timed out - the server may be busy.";
      } else if (error.message.includes('fetch')) {
        errorMessage = "Network error - check your connection.";
      } else if (error.message.includes('401') || error.message.includes('403')) {
        errorMessage = "Authentication failed - please log in again.";
        handleLogout();
        return;
      } else {
        errorMessage = `Error: ${error.message}`;
      }
      
      const botMessage: Message = { from: "bot", text: errorMessage };
      setMessages((msgs) => [...msgs, botMessage]);
    } finally {
      setIsLoading(false);
    }
  }

  function requestExpansion(messageText: string) {
    setInput(`Please expand on: ${messageText.slice(0, 100)}...`);
  }

  // File validation function
  const validateFileBeforeUpload = (file: File): string | null => {
    const maxSize = 50 * 1024 * 1024; // 50MB (matching your backend)
    const allowedTypes = [
      'application/pdf',
      'application/msword',
      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
      'text/plain',
      'application/rtf'
    ];
    
    if (file.size > maxSize) {
      return `File "${file.name}" is too large: ${(file.size / 1024 / 1024).toFixed(2)}MB. Maximum allowed: 50MB`;
    }
    
    if (!allowedTypes.includes(file.type)) {
      const extension = '.' + (file.name.split('.').pop()?.toLowerCase() || '');
      return `File "${file.name}" has unsupported type: ${extension}. Allowed: PDF, DOC, DOCX, RTF, TXT`;
    }
    
    return null; // No errors
  };

  // File upload functions
  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || []);
    
    if (files.length === 0) return;

    const validFiles: File[] = [];
    const errors: string[] = [];

    files.forEach(file => {
      const validationError = validateFileBeforeUpload(file);
      if (validationError) {
        errors.push(validationError);
      } else {
        validFiles.push(file);
      }
    });

    if (errors.length > 0) {
      alert('Some files had issues:\n\n' + errors.join('\n\n'));
    }

    if (validFiles.length > 0) {
      setUploadQueue(prev => [...prev, ...validFiles]);
      console.log(`Added ${validFiles.length} files to upload queue`);
    }

    // Clear the input
    event.target.value = '';
  };

  const uploadAllDocuments = async (runAnalysisAfter = false) => {
    if (uploadQueue.length === 0) return;

    setIsAnalyzing(true);
    setUploadResults([]);

    const results: any[] = [];
    const uploadedDocIds: string[] = [];

    for (let i = 0; i < uploadQueue.length; i++) {
      const file = uploadQueue[i];
      setCurrentlyUploading(file);
      setUploadProgress(((i) / uploadQueue.length) * 100);

      // Create a new controller for each file upload
      const controller = new AbortController();
      let timeoutId: NodeJS.Timeout | null = null;

      try {
        console.log(`Starting upload: ${file.name} (${(file.size / 1024 / 1024).toFixed(2)}MB)`);

        const formData = new FormData();
        formData.append('file', file);

        // No timeout - let it run as long as needed
        // timeoutId = setTimeout(() => {
        //   console.log(`Upload timeout for ${file.name}`);
        //   controller.abort('Upload timeout after 10 minutes');
        // }, 600000);

        const response = await fetch(`${backendUrl}/user/upload`, {
          method: 'POST',
          signal: controller.signal,
          headers: {
            'Authorization': `Bearer ${apiToken}`
          },
          body: formData
        });

        // Clear timeout immediately when response is received
        // if (timeoutId) {
        //   clearTimeout(timeoutId);
        //   timeoutId = null;
        // }

        if (!response.ok) {
          let errorMessage = `Upload failed (${response.status})`;
          try {
            const errorText = await response.text();
            errorMessage = errorText || response.statusText || errorMessage;
          } catch (e) {
            errorMessage = `HTTP ${response.status}: ${response.statusText}`;
          }
          throw new Error(errorMessage);
        }

        const data = await response.json();
        
        console.log(`Upload successful: ${file.name}`, data);
        
        results.push({
          filename: file.name,
          success: true,
          pages_processed: data.pages_processed,
          file_id: data.file_id,
          processing_time: data.processing_time,
          warnings: data.warnings || []
        });

        uploadedDocIds.push(data.file_id);

      } catch (error: any) {
        // Clear timeout on error (not needed without timeout)
        // if (timeoutId) {
        //   clearTimeout(timeoutId);
        //   timeoutId = null;
        // }

        console.error(`Upload failed for ${file.name}:`, error);
        
        let errorMessage = 'Upload failed';
        
        if (error.name === 'AbortError') {
          if (error.message && error.message.includes('timeout')) {
            errorMessage = 'Upload timeout - file may be too large or server is slow';
          } else {
            errorMessage = 'Upload was cancelled or aborted';
          }
        } else if (error.message) {
          errorMessage = `Upload failed: ${error.message}`;
        } else {
          errorMessage = 'Upload failed - unknown error';
        }
        
        results.push({
          filename: file.name,
          success: false,
          error: errorMessage
        });
      }
    }

    setUploadProgress(100);
    setUploadResults(results);
    setCurrentlyUploading(null);
    setUploadQueue([]);
    
    // Reload user documents
    try {
      await loadUserDocuments();
    } catch (error) {
      console.error('Failed to reload user documents:', error);
    }
    
    const successful = results.filter(r => r.success).length;
    const failed = results.filter(r => !r.success).length;
    
    let message = `Upload complete!\n‚úÖ ${successful} documents uploaded successfully`;
    if (failed > 0) {
      message += `\n‚ùå ${failed} documents failed`;
    }
    
    if (runAnalysisAfter && successful > 0) {
      message += `\nüîç Running comprehensive analysis...`;
      
      // Run analysis for each uploaded document
      for (const docId of uploadedDocIds) {
        try {
          await runComprehensiveDocumentAnalysis(docId);
        } catch (analysisError) {
          console.error(`Analysis failed for document ${docId}:`, analysisError);
        }
      }
      
      setActiveTab('results');
    } else if (successful > 0) {
      setActiveTab('documents');
    }
    
    alert(message);
    setIsAnalyzing(false);
    
    // Clear progress after a delay
    setTimeout(() => {
      setUploadProgress(0);
      setUploadResults([]);
    }, 5000);
  };

  // Analysis functions (keeping existing implementation)
  const runComprehensiveDocumentAnalysis = async (documentId: string) => {
    const document = documentAnalyses.find(d => d.id === documentId);
    if (!document) return;

    setIsAnalyzing(true);

    const processingResult: AnalysisResult = {
      id: Date.now() + Math.random(),
      toolId: 'comprehensive',
      toolTitle: 'Complete Document Analysis',
      document: document.filename,
      documentId: documentId,
      analysis: 'Running comprehensive analysis including summary, clauses, risks, timeline, obligations, and missing clauses...',
      timestamp: new Date().toLocaleString(),
      status: 'processing',
      sources: [],
      analysisType: 'comprehensive'
    };
    
    setAnalysisResults(prev => [processingResult, ...prev]);
    setActiveTab('results');

    try {
      const comprehensivePrompt = `Please provide a comprehensive legal analysis of this document. Structure your response with the following sections:

## DOCUMENT SUMMARY
## KEY CLAUSES ANALYSIS  
## RISK ASSESSMENT
## TIMELINE & DEADLINES
## PARTY OBLIGATIONS
## MISSING CLAUSES

Please be thorough and provide specific examples from the document text.`;

      const requestBody = {
        question: comprehensivePrompt,
        session_id: sessionId || undefined,
        response_style: "detailed",
        search_scope: "user_only",
        use_enhanced_rag: useEnhancedRag
      };

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 60000);

      const response = await fetch(`${backendUrl}/ask`, {
        method: 'POST',
        signal: controller.signal,
        headers: {
          'Authorization': `Bearer ${apiToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Analysis failed (${response.status}): ${errorText || response.statusText}`);
      }

      const data = await response.json();
      
      if (data.session_id && !sessionId) {
        setSessionId(data.session_id);
      }

      const analysisText = data.response || 'Comprehensive analysis could not be completed.';
      const status = data.error ? 'failed' : 'completed';
      
      setAnalysisResults(prev => prev.map(r => 
        r.id === processingResult.id 
          ? {
              ...r,
              analysis: analysisText,
              confidence: data.confidence_score || 0.8,
              status: status,
              sources: data.sources || [],
              warnings: data.error ? [data.error] : []
            }
          : r
      ));

      setDocumentAnalyses(prev => prev.map(d => 
        d.id === documentId 
          ? {
              ...d,
              analysisResults: { comprehensive: analysisText },
              lastAnalyzed: new Date().toISOString(),
              confidence: data.confidence_score || 0.8
            }
          : d
      ));

    } catch (error) {
      console.error('Comprehensive analysis failed:', error);
      
      let errorMessage = 'Comprehensive analysis failed';
      if (error.name === 'AbortError') {
        errorMessage = 'Analysis timed out - the analysis was too complex';
      } else {
        errorMessage = `Analysis failed: ${error.message}`;
      }
      
      setAnalysisResults(prev => prev.map(r => 
        r.id === processingResult.id 
          ? {
              ...r,
              analysis: errorMessage,
              status: 'failed',
              warnings: ['Make sure the document was uploaded successfully and you have proper access.']
            }
          : r
      ));
    } finally {
      setIsAnalyzing(false);
    }
  };

  // Enhanced analysis functions to match your existing code structure
  const runAnalysis = async (toolId: string, documentId?: string) => {
    const tool = analysisTools.find(t => t.id === toolId);
    if (!tool) return;

    if (tool.isComprehensive) {
      if (documentId) {
        await runComprehensiveDocumentAnalysis(documentId);
      } else {
        for (const doc of documentAnalyses) {
          await runComprehensiveDocumentAnalysis(doc.id);
        }
      }
      return;
    }

    // Individual tool analysis - same as your existing implementation
    setIsAnalyzing(true);

    const targetDoc = documentId ? documentAnalyses.find(d => d.id === documentId) : null;
    const docName = targetDoc ? targetDoc.filename : "User Documents";

    const processingResult: AnalysisResult = {
      id: Date.now() + Math.random(),
      toolId: toolId,
      toolTitle: tool.title,
      document: docName,
      documentId: documentId || 'all',
      analysis: `Running ${tool.title.toLowerCase()} on ${docName}...`,
      timestamp: new Date().toLocaleString(),
      status: 'processing',
      sources: [],
      analysisType: toolId
    };
    
    setAnalysisResults(prev => [processingResult, ...prev]);
    setActiveTab('results');

    try {
      const requestBody = {
        question: tool.prompt,
        session_id: sessionId || undefined,
        response_style: "detailed",
        search_scope: documentId ? "user_only" : "user_only",
        use_enhanced_rag: useEnhancedRag
      };

      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 45000);

      const response = await fetch(`${backendUrl}/ask`, {
        method: 'POST',
        signal: controller.signal,
        headers: {
          'Authorization': `Bearer ${apiToken}`,
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Analysis failed (${response.status}): ${errorText || response.statusText}`);
      }

      const data = await response.json();
      
      if (data.session_id && !sessionId) {
        setSessionId(data.session_id);
      }

      const analysisText = data.response || 'Analysis could not be completed.';
      const status = data.error ? 'failed' : 'completed';
      
      setAnalysisResults(prev => prev.map(r => 
        r.id === processingResult.id 
          ? {
              ...r,
              analysis: analysisText,
              confidence: data.confidence_score || 0.7,
              status: status,
              sources: data.sources || [],
              warnings: data.error ? [data.error] : []
            }
          : r
      ));

    } catch (error) {
      console.error('Analysis failed:', error);
      
      let errorMessage = 'Analysis failed';
      if (error.name === 'AbortError') {
        errorMessage = 'Analysis timed out - the request took too long';
      } else {
        errorMessage = `Analysis failed: ${error.message}`;
      }
      
      setAnalysisResults(prev => prev.map(r => 
        r.id === processingResult.id 
          ? {
              ...r,
              analysis: errorMessage,
              status: 'failed',
              warnings: ['Make sure you have uploaded documents and have proper authentication.']
            }
          : r
      ));
    } finally {
      setIsAnalyzing(false);
    }
  };

  const removeFromQueue = (index: number) => {
    setUploadQueue(prev => prev.filter((_, i) => i !== index));
  };

  const clearQueue = () => {
    setUploadQueue([]);
    setUploadResults([]);
  };

  const downloadResult = (resultId: number) => {
    const result = analysisResults.find(r => r.id === resultId);
    if (!result) return;

    const content = `Legal Document Analysis Report
Generated: ${result.timestamp}
Analysis Type: ${result.toolTitle}
Document: ${result.document}
User: ${currentUser?.username}
Status: ${result.status}
Confidence Score: ${result.confidence ? Math.round(result.confidence * 100) + '%' : 'N/A'}

ANALYSIS RESULTS:
${result.analysis}

${result.extractedData ? '\nEXTRACTED DATA:\n' + JSON.stringify(result.extractedData, null, 2) : ''}
${result.warnings && result.warnings.length > 0 ? '\nWARNINGS:\n' + result.warnings.join('\n') : ''}

---
Generated by Legal Document Analysis Assistant
User: ${currentUser?.username} (${currentUser?.subscription_tier})
This analysis is for informational purposes only and does not constitute legal advice.`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `legal-analysis-${result.toolId}-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const deleteUserDocument = async (fileId: string) => {
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000);

      const response = await fetch(`${backendUrl}/user/documents/${fileId}`, {
        method: 'DELETE',
        signal: controller.signal,
        headers: {
          'Authorization': `Bearer ${apiToken}`
        }
      });

      clearTimeout(timeoutId);

      if (response.ok) {
        loadUserDocuments();
        alert('Document deleted successfully');
      } else {
        const errorText = await response.text();
        throw new Error(`Delete failed (${response.status}): ${errorText || response.statusText}`);
      }
    } catch (error) {
      console.error('Delete failed:', error);
      alert(`Delete failed: ${error.message}`);
    }
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'completed': return 'bg-emerald-100 text-emerald-800';
      case 'failed': return 'bg-rose-100 text-rose-800';
      case 'processing': return 'bg-sky-100 text-sky-800';
      default: return 'bg-gray-100 text-gray-800';
    }
  };

  const getSubscriptionBadge = () => {
    const tier = currentUser?.subscription_tier || 'free';
    const colors = {
      free: 'bg-gray-100 text-gray-800',
      premium: 'bg-blue-100 text-blue-800'
    };
    return colors[tier] || colors.free;
  };

  // Login Screen Component
  if (!isLoggedIn) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-slate-900 via-gray-900 to-slate-800 flex items-center justify-center p-6">
        <div className="w-full max-w-md">
          {/* Logo/Header */}
          <div className="text-center mb-8">
            <div className="w-20 h-20 bg-gradient-to-br from-blue-500 to-purple-600 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-xl">
              <svg className="w-10 h-10 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16H9m3 0h3" />
              </svg>
            </div>
            <h1 className="text-3xl font-bold text-white mb-2">Legal Assistant</h1>
            <p className="text-gray-300">AI-Powered Legal Document Analysis</p>
          </div>

          {/* Login Form */}
          <div className="bg-white rounded-2xl shadow-2xl p-8">
            <form onSubmit={handleLogin} className="space-y-6">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Username
                </label>
                <input
                  type="text"
                  value={loginForm.username}
                  onChange={(e) => setLoginForm(prev => ({ ...prev, username: e.target.value }))}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Enter your username"
                  required
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Password
                </label>
                <input
                  type="password"
                  value={loginForm.password}
                  onChange={(e) => setLoginForm(prev => ({ ...prev, password: e.target.value }))}
                  className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  placeholder="Enter your password"
                  required
                />
              </div>

              {loginError && (
                <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                  <p className="text-red-800 text-sm">{loginError}</p>
                </div>
              )}

              <button
                type="submit"
                disabled={isLoggingIn}
                className="w-full bg-gradient-to-r from-blue-600 to-purple-600 text-white py-3 px-4 rounded-lg hover:from-blue-700 hover:to-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-all font-medium"
              >
                {isLoggingIn ? (
                  <div className="flex items-center justify-center">
                    <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                    Logging in...
                  </div>
                ) : (
                  'Sign In'
                )}
              </button>
            </form>

            {/* Test Accounts Info - SIMPLIFIED */}
            <div className="mt-8 pt-6 border-t border-gray-200">
              <h3 className="text-sm font-medium text-gray-700 mb-3">Test Accounts:</h3>
              <div className="space-y-2 text-xs">
                {TEST_ACCOUNTS.map((account, index) => (
                  <div key={index} className="flex justify-between items-center p-2 bg-gray-50 rounded">
                    <span className="font-medium">{account.username}</span>
                    <span className="text-gray-600">{account.password}</span>
                    <span className={`px-2 py-1 rounded-full text-xs ${
                      account.subscription_tier === 'premium' ? 'bg-blue-100 text-blue-700' : 'bg-gray-100 text-gray-700'
                    }`}>
                      {account.subscription_tier}
                      {account.subscription_tier === 'premium' && <span className="ml-1">üîó</span>}
                    </span>
                  </div>
                ))}
                <button
                  type="button"
                  onClick={() => setLoginForm({ username: 'demo', password: 'demo123' })}
                  className="text-blue-600 hover:text-blue-700 text-xs font-medium"
                >
                  Quick Login as Demo User (Free)
                </button>
              </div>
              <div className="mt-3 p-2 bg-blue-50 rounded text-xs text-blue-700">
                <strong>üîó Premium users</strong> have access to external legal databases (LexisNexis, Westlaw)
              </div>
            </div>
          </div>

          {/* Footer */}
          <div className="text-center mt-6 text-gray-400 text-sm">
            <p>Secure AI Legal Assistant Platform</p>
            <p>Connected to: {backendUrl}</p>
          </div>
        </div>
      </div>
    );
  }

  // Main Application (same as before, but with authentication-aware components)
  return (
    <div className="flex flex-col h-screen bg-gradient-to-br from-slate-50 via-gray-50 to-slate-100">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-100">
        <div className="px-6 py-4">
          <div className="flex items-center justify-between max-w-7xl mx-auto">
            <div className="flex items-center gap-4">
              <div className="w-12 h-12 bg-gradient-to-br from-slate-900 to-slate-700 rounded-xl flex items-center justify-center shadow-md">
                <svg className="w-7 h-7 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16H9m3 0h3" />
                </svg>
              </div>
              <div>
                <h1 className="text-xl font-semibold text-gray-900">
                  Enhanced Legal Assistant
                </h1>
                <p className="text-xs text-gray-500">Welcome, {currentUser?.username} ({currentUser?.role})</p>
              </div>
            </div>
            <div className="flex items-center gap-3">
              {/* User Info */}
              <div className="flex items-center gap-2 px-3 py-1.5 bg-gray-50 rounded-full">
                <div className="w-2 h-2 rounded-full bg-green-500" />
                <span className="text-sm text-gray-700">{currentUser?.username}</span>
              </div>

              {/* Subscription Badge - SIMPLIFIED */}
              <div className={`px-3 py-1.5 rounded-full text-xs font-medium ${getSubscriptionBadge()}`}>
                {currentUser?.subscription_tier.toUpperCase()}
                {currentUser?.subscription_tier === 'premium' && (
                  <span className="ml-1" title="Has access to external legal databases">üîó</span>
                )}
              </div>

              {/* Backend Status */}
              <div className={`flex items-center gap-2 px-3 py-1.5 rounded-full text-xs font-medium ${
                isBackendConfigured 
                  ? 'bg-emerald-50 text-emerald-700 border border-emerald-200' 
                  : 'bg-rose-50 text-rose-700 border border-rose-200'
              }`}>
                <div className={`w-2 h-2 rounded-full ${isBackendConfigured ? 'bg-emerald-500' : 'bg-rose-500'} animate-pulse`} />
                <span>
                  {isBackendConfigured 
                    ? `Connected` 
                    : 'Disconnected'
                  }
                </span>
              </div>

              {/* Enhanced RAG Status */}
              {isBackendConfigured && backendCapabilities.enhancedRag && (
                <div className="flex items-center gap-2 px-3 py-1.5 rounded-full text-xs font-medium bg-blue-50 text-blue-700 border border-blue-200">
                  <span>üß†</span>
                  <span>Smart RAG</span>
                </div>
              )}
              
              {/* Logout Button */}
              <button
                onClick={handleLogout}
                className="p-2 bg-gray-50 hover:bg-gray-100 rounded-lg transition-all hover:shadow-sm text-gray-600 hover:text-gray-700"
                title="Logout"
              >
                <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
                </svg>
              </button>
              
              {sessionId && (
                <div className="text-xs text-gray-500 font-mono bg-gray-50 px-3 py-1.5 rounded-lg">
                  Session: {sessionId.substring(0, 8)}
                </div>
              )}
            </div>
          </div>
        </div>
      </header>

      {/* Backend Warning */}
      {!isBackendConfigured && (
        <div className="bg-amber-50 border-b border-amber-100 px-6 py-3">
          <div className="max-w-7xl mx-auto flex items-center gap-3">
            <svg className="w-5 h-5 text-amber-600 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
            </svg>
            <div className="flex-1">
              <p className="text-sm text-amber-800">
                {connectionError || "Connecting to backend server..."}
              </p>
            </div>
          </div>
        </div>
      )}

      {/* Tab Navigation */}
      <nav className="bg-white border-b border-gray-100">
        <div className="max-w-7xl mx-auto px-6">
          <div className="flex space-x-8">
            {[
              { id: 'chat', label: 'Smart Chat', icon: 'üí¨', available: true },
              { id: 'upload', label: 'Upload & Analyze', icon: 'üì§', available: true },
              { id: 'documents', label: 'My Documents', icon: 'üìÅ', badge: userDocuments.length > 0 ? userDocuments.length : null, available: true },
              { id: 'analysis', label: 'Analysis Tools', icon: 'üîç', available: true },
              { id: 'results', label: 'Results', icon: 'üìä', badge: analysisResults.length > 0 ? analysisResults.length : null, available: true }
            ].map(tab => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                disabled={!isBackendConfigured}
                className={`relative py-4 px-1 text-sm font-medium transition-all border-b-2 ${
                  activeTab === tab.id
                    ? 'text-slate-900 border-slate-900'
                    : 'text-gray-500 hover:text-gray-700 border-transparent hover:border-gray-300'
                } ${!isBackendConfigured ? 'cursor-not-allowed opacity-50' : ''}`}
              >
                <div className="flex items-center gap-2">
                  <span className="text-base">{tab.icon}</span>
                  <span>{tab.label}</span>
                  {tab.badge && (
                    <span className="ml-1 bg-slate-900 text-white text-xs font-medium px-2 py-0.5 rounded-full">
                      {tab.badge}
                    </span>
                  )}
                </div>
              </button>
            ))}
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <div className="flex-grow overflow-auto">
        <div className="w-full max-w-7xl mx-auto p-6">
          
          {/* Backend Not Configured */}
          {!isBackendConfigured && (
            <div className="min-h-[calc(100vh-250px)] flex items-center justify-center">
              <div className="bg-white rounded-2xl shadow-sm border border-gray-100 p-12 text-center max-w-2xl">
                <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
                  <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                  </svg>
                </div>
                <h3 className="text-2xl font-semibold text-gray-900 mb-3">Connecting to Backend</h3>
                <p className="text-gray-600 mb-6">
                  Please wait while we connect to the Enhanced Legal Assistant backend server...
                </p>
                {connectionError && (
                  <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                    <p className="text-red-800 text-sm">{connectionError}</p>
                  </div>
                )}
                <div className="flex gap-3 justify-center">
                  <button
                    onClick={() => testConnectionWithUrl(backendUrl)}
                    className="bg-slate-900 text-white px-6 py-3 rounded-lg hover:bg-slate-800 transition-all font-medium"
                  >
                    Retry Connection
                  </button>
                </div>
              </div>
            </div>
          )}
          
          {/* Chat Tab */}
          {activeTab === 'chat' && isBackendConfigured && (
            <div className="bg-white rounded-2xl shadow-sm border border-gray-100 h-[calc(100vh-200px)] flex flex-col overflow-hidden">
              <div className="flex-grow overflow-y-auto p-6 space-y-4">
                {messages.map((msg, idx) => (
                  <div key={idx} className={`flex ${msg.from === "user" ? "justify-end" : "justify-start"}`}>
                    <div className={`max-w-3xl rounded-2xl px-4 py-3 ${
                      msg.from === "user" 
                        ? "bg-slate-900 text-white" 
                        : "bg-gray-50 text-gray-900 border border-gray-100"
                    }`}>
                      <div 
                        className="prose prose-sm max-w-none"
                        dangerouslySetInnerHTML={{ __html: renderMarkdown(msg.text) }}
                      />
                      
                      {msg.from === "bot" && (msg.confidence || msg.sources?.length > 0) && (
                        <div className="mt-3 pt-3 border-t border-gray-200 text-xs text-gray-500">
                          {msg.confidence && (
                            <div className="flex items-center gap-2 mb-2">
                              <span>Confidence:</span>
                              <div className="flex-1 bg-gray-200 rounded-full h-2 max-w-20">
                                <div 
                                  className="bg-blue-500 h-2 rounded-full transition-all" 
                                  style={{ width: `${(msg.confidence * 100)}%` }}
                                />
                              </div>
                              <span>{Math.round((msg.confidence || 0) * 100)}%</span>
                            </div>
                          )}
                          {msg.sources && msg.sources.length > 0 && (
                            <div>
                              <span className="font-medium">Sources: </span>
                              {msg.sources.slice(0, 3).map((source: any, i: number) => (
                                <span key={i} className="mr-2">
                                  {source.file_name}
                                  {i < Math.min(msg.sources.length - 1, 2) ? ',' : ''}
                                </span>
                              ))}
                              {msg.sources.length > 3 && <span>+{msg.sources.length - 3} more</span>}
                            </div>
                          )}
                        </div>
                      )}
                      
                      {msg.from === "bot" && msg.expandAvailable && (
                        <button
                          onClick={() => requestExpansion(msg.text)}
                          className="mt-2 text-xs bg-blue-50 text-blue-600 px-3 py-1 rounded-full hover:bg-blue-100 transition-all"
                        >
                          Expand Answer
                        </button>
                      )}
                    </div>
                  </div>
                ))}
                
                {isLoading && (
                  <div className="flex justify-start">
                    <div className="bg-gray-50 rounded-2xl px-4 py-3 border border-gray-100">
                      <div className="flex items-center gap-2">
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" />
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
                        <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
                        <span className="text-sm text-gray-500 ml-2">AI is thinking...</span>
                      </div>
                    </div>
                  </div>
                )}
                
                <div ref={messagesEndRef} />
              </div>
              
              <div className="p-6 border-t border-gray-100 bg-gray-50">
                <div className="flex items-center gap-4 mb-4 text-sm">
                  <div className="flex items-center gap-2">
                    <label className="text-gray-600">Style:</label>
                    <select 
                      value={responseStyle} 
                      onChange={(e) => setResponseStyle(e.target.value)}
                      className="bg-white border border-gray-200 rounded px-2 py-1 text-sm"
                    >
                      <option value="concise">Concise</option>
                      <option value="balanced">Balanced</option>
                      <option value="detailed">Detailed</option>
                    </select>
                  </div>
                  
                  <div className="flex items-center gap-2">
                    <label className="text-gray-600">Search:</label>
                    <select 
                      value={searchScope} 
                      onChange={(e) => setSearchScope(e.target.value)}
                      className="bg-white border border-gray-200 rounded px-2 py-1 text-sm"
                    >
                      <option value="all">All Sources</option>
                      <option value="user_only">My Documents Only</option>
                      <option value="default_only">Default Database Only</option>
                    </select>
                  </div>
                  
                  <div className="flex items-center gap-2">
                    <label className="flex items-center gap-1 text-gray-600">
                      <input 
                        type="checkbox" 
                        checked={useEnhancedRag} 
                        onChange={(e) => setUseEnhancedRag(e.target.checked)}
                        className="w-4 h-4"
                      />
                      Enhanced RAG
                    </label>
                  </div>
                </div>
                
                <div className="flex gap-3">
                  <input
                    type="text"
                    value={input}
                    onChange={(e) => setInput(e.target.value)}
                    onKeyPress={(e) => e.key === 'Enter' && sendMessage()}
                    placeholder="Ask a legal question..."
                    className="flex-1 px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-slate-500 focus:border-transparent"
                    disabled={isLoading}
                  />
                  <button
                    onClick={() => sendMessage()}
                    disabled={isLoading || !input.trim()}
                    className="bg-slate-900 text-white px-6 py-3 rounded-xl hover:bg-slate-800 disabled:bg-gray-300 disabled:cursor-not-allowed transition-all font-medium"
                  >
                    Send
                  </button>
                </div>
              </div>
            </div>
          )}
          
          {/* Upload Tab */}
          {activeTab === 'upload' && isBackendConfigured && (
            <div className="bg-white rounded-2xl shadow-sm border border-gray-100 p-8">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-semibold text-gray-900">Upload & Analyze Documents</h2>
                <div className="text-sm text-gray-500">
                  {uploadQueue.length > 0 && `${uploadQueue.length} file${uploadQueue.length !== 1 ? 's' : ''} queued`}
                </div>
              </div>
              
              <div className="max-w-4xl">
                {/* Upload Zone */}
                <div className="border-2 border-dashed border-gray-300 rounded-xl p-8 text-center hover:border-gray-400 transition-all">
                  <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                    </svg>
                  </div>
                  
                  <h3 className="text-lg font-medium text-gray-900 mb-2">Upload Documents</h3>
                  <p className="text-gray-600 mb-4">
                    Support for PDF, DOC, DOCX, RTF, and TXT files (max 50MB each)
                    <br />
                    <strong>Select multiple files and choose to auto-analyze after upload</strong>
                  </p>
                  
                  <input
                    type="file"
                    onChange={handleFileUpload}
                    accept=".pdf,.doc,.docx,.txt,.rtf"
                    className="hidden"
                    id="file-upload"
                    multiple
                  />
                  <label
                    htmlFor="file-upload"
                    className="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-lg text-white bg-slate-900 hover:bg-slate-800 cursor-pointer transition-all"
                  >
                    Choose Files
                  </label>
                </div>

                {/* Upload Queue with Enhanced Options */}
                {uploadQueue.length > 0 && (
                  <div className="mt-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
                    <div className="flex items-center justify-between mb-4">
                      <h4 className="font-medium text-blue-900">Upload Queue ({uploadQueue.length} files)</h4>
                      <div className="flex gap-2">
                        <button
                          onClick={clearQueue}
                          className="text-blue-600 hover:text-blue-800 text-sm font-medium"
                        >
                          Clear All
                        </button>
                        <button
                          onClick={() => uploadAllDocuments(false)}
                          disabled={isAnalyzing}
                          className="bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 disabled:bg-gray-300 transition-all font-medium text-sm"
                        >
                          {isAnalyzing ? 'Uploading...' : 'Upload Only'}
                        </button>
                        <button
                          onClick={() => uploadAllDocuments(true)}
                          disabled={isAnalyzing}
                          className="bg-green-600 text-white px-4 py-2 rounded-lg hover:bg-green-700 disabled:bg-gray-300 transition-all font-medium text-sm"
                        >
                          {isAnalyzing ? 'Processing...' : 'Upload & Analyze All'}
                        </button>
                      </div>
                    </div>
                    
                    {/* File List */}
                    <div className="space-y-2 max-h-40 overflow-y-auto">
                      {uploadQueue.map((file, index) => (
                        <div key={`${file.name}-${index}`} className="flex items-center justify-between bg-white rounded-lg p-3 border">
                          <div className="flex items-center gap-3">
                            <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                            </svg>
                            <div>
                              <p className="font-medium text-gray-900 text-sm">{file.name}</p>
                              <p className="text-xs text-gray-600">
                                {(file.size / 1024 / 1024).toFixed(2)} MB
                              </p>
                            </div>
                            {currentlyUploading === file && (
                              <span className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-full">
                                Uploading...
                              </span>
                            )}
                          </div>
                          <button
                            onClick={() => removeFromQueue(index)}
                            disabled={isAnalyzing}
                            className="text-red-600 hover:text-red-700 p-1 disabled:opacity-50"
                            title="Remove from queue"
                          >
                            <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                            </svg>
                          </button>
                        </div>
                      ))}
                    </div>
                    
                    {/* Progress Bar */}
                    {isAnalyzing && (
                      <div className="mt-4">
                        <div className="flex items-center justify-between text-sm text-blue-700 mb-2">
                          <span>Processing documents...</span>
                          <span>{Math.round(uploadProgress)}%</span>
                        </div>
                        <div className="bg-blue-200 rounded-full h-2">
                          <div 
                            className="bg-blue-600 h-2 rounded-full transition-all duration-300" 
                            style={{ width: `${uploadProgress}%` }}
                          />
                        </div>
                        {currentlyUploading && (
                          <p className="text-xs text-blue-600 mt-2">
                            Currently uploading: {currentlyUploading.name}
                          </p>
                        )}
                      </div>
                    )}
                  </div>
                )}

                {/* Upload Results */}
                {uploadResults.length > 0 && (
                  <div className="mt-6 p-4 bg-gray-50 rounded-lg">
                    <h4 className="font-medium text-gray-900 mb-3">Upload Results</h4>
                    <div className="space-y-2">
                      {uploadResults.map((result, index) => (
                        <div key={index} className={`p-3 rounded-lg border ${
                          result.success ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'
                        }`}>
                          <div className="flex items-center gap-2">
                            {result.success ? (
                              <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                              </svg>
                            ) : (
                              <svg className="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                              </svg>
                            )}
                            <div className="flex-1">
                              <p className={`font-medium text-sm ${result.success ? 'text-green-800' : 'text-red-800'}`}>
                                {result.filename}
                              </p>
                              {result.success ? (
                                <p className="text-xs text-green-600">
                                  ‚úÖ {result.pages_processed} pages processed in {result.processing_time?.toFixed(2)}s
                                </p>
                              ) : (
                                <p className="text-xs text-red-600">
                                  ‚ùå {result.error}
                                </p>
                              )}
                            </div>
                          </div>
                          {result.warnings && result.warnings.length > 0 && (
                            <div className="mt-2 text-xs text-yellow-700">
                              <strong>Warnings:</strong> {result.warnings.join(', ')}
                            </div>
                          )}
                        </div>
                      ))}
                    </div>
                  </div>
                )}
                
                {/* Enhanced Instructions */}
                <div className="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
                  <div className="p-4 bg-gray-50 rounded-lg">
                    <h4 className="font-medium text-gray-900 mb-2">Supported File Types:</h4>
                    <ul className="text-sm text-gray-600 space-y-1">
                      <li>‚Ä¢ <strong>PDF:</strong> Portable Document Format</li>
                      <li>‚Ä¢ <strong>DOC/DOCX:</strong> Microsoft Word documents</li>
                      <li>‚Ä¢ <strong>TXT:</strong> Plain text files</li>
                      <li>‚Ä¢ <strong>RTF:</strong> Rich Text Format</li>
                    </ul>
                  </div>
                  
                  <div className="p-4 bg-green-50 rounded-lg">
                    <h4 className="font-medium text-gray-900 mb-2">üöÄ New: Multi-Analysis Upload:</h4>
                    <ul className="text-sm text-gray-600 space-y-1">
                      <li>‚Ä¢ <strong>Upload & Analyze All:</strong> Automatically runs comprehensive analysis</li>
                      <li>‚Ä¢ <strong>Upload Only:</strong> Upload files for later analysis</li>
                      <li>‚Ä¢ Comprehensive analysis includes: summary, clauses, risks, timeline, obligations</li>
                      <li>‚Ä¢ Results appear instantly in the Results tab</li>
                    </ul>
                  </div>
                </div>
              </div>
            </div>
          )}
          
          {/* Documents Tab */}
          {activeTab === 'documents' && isBackendConfigured && (
            <div className="bg-white rounded-2xl shadow-sm border border-gray-100 p-8">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-semibold text-gray-900">My Documents</h2>
                <div className="text-sm text-gray-500">
                  {userDocuments.length} document{userDocuments.length !== 1 ? 's' : ''}
                </div>
              </div>
              
              {userDocuments.length === 0 ? (
                <div className="text-center py-12">
                  <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                    </svg>
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No documents uploaded</h3>
                  <p className="text-gray-600 mb-4">Upload your first legal document to get started</p>
                  <button
                    onClick={() => setActiveTab('upload')}
                    className="bg-slate-900 text-white px-6 py-3 rounded-lg hover:bg-slate-800 transition-all font-medium"
                  >
                    Upload Document
                  </button>
                </div>
              ) : (
                <div className="space-y-4">
                  {documentAnalyses.map((doc: DocumentAnalysis) => (
                    <div key={doc.id} className="border border-gray-200 rounded-lg p-4 hover:shadow-sm transition-all">
                      <div className="flex items-center justify-between">
                        <div className="flex items-center gap-3">
                          <div className="w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center">
                            <svg className="w-5 h-5 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                            </svg>
                          </div>
                          <div>
                            <h4 className="font-medium text-gray-900">{doc.filename}</h4>
                            <p className="text-sm text-gray-600">
                              Uploaded {new Date(doc.uploadedAt).toLocaleDateString()} ‚Ä¢ {doc.pagesProcessed} pages
                              {doc.lastAnalyzed && (
                                <span className="ml-2 text-green-600">
                                  ‚Ä¢ Analyzed {new Date(doc.lastAnalyzed).toLocaleDateString()}
                                </span>
                              )}
                            </p>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          {/* Quick Analysis Button */}
                          <button
                            onClick={() => runComprehensiveDocumentAnalysis(doc.id)}
                            disabled={isAnalyzing}
                            className="bg-green-600 text-white px-3 py-2 rounded-lg hover:bg-green-700 disabled:bg-gray-300 transition-all font-medium text-sm"
                            title="Run comprehensive analysis"
                          >
                            {isAnalyzing ? 'Analyzing...' : 'üîç Analyze'}
                          </button>
                          
                          {/* Delete Button */}
                          <button
                            onClick={() => deleteUserDocument(doc.id)}
                            className="text-red-600 hover:text-red-700 p-2 hover:bg-red-50 rounded-lg transition-all"
                            title="Delete document"
                          >
                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
                            </svg>
                          </button>
                        </div>
                      </div>
                      
                      {/* Analysis Status */}
                      {doc.confidence && (
                        <div className="mt-3 pt-3 border-t border-gray-200">
                          <div className="flex items-center justify-between text-sm text-gray-600">
                            <span>Last Analysis Confidence:</span>
                            <div className="flex items-center gap-2">
                              <div className="w-16 bg-gray-200 rounded-full h-2">
                                <div 
                                  className="bg-green-500 h-2 rounded-full transition-all" 
                                  style={{ width: `${(doc.confidence * 100)}%` }}
                                />
                              </div>
                              <span className="text-xs font-medium">{Math.round(doc.confidence * 100)}%</span>
                            </div>
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
          
          {/* Analysis Tab */}
          {activeTab === 'analysis' && isBackendConfigured && (
            <div className="bg-white rounded-2xl shadow-sm border border-gray-100 p-8">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-semibold text-gray-900">Analysis Tools</h2>
                <div className="text-sm text-gray-500">
                  {userDocuments.length > 0 && `${userDocuments.length} document${userDocuments.length !== 1 ? 's' : ''} available`}
                </div>
              </div>
              
              {userDocuments.length === 0 ? (
                <div className="text-center py-12">
                  <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                    </svg>
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No documents to analyze</h3>
                  <p className="text-gray-600 mb-4">Upload documents first to run analysis tools</p>
                  <button
                    onClick={() => setActiveTab('upload')}
                    className="bg-slate-900 text-white px-6 py-3 rounded-lg hover:bg-slate-800 transition-all font-medium"
                  >
                    Upload Documents
                  </button>
                </div>
              ) : (
                <>
                  {/* Document Selector */}
                  <div className="mb-6 p-4 bg-blue-50 rounded-lg border border-blue-200">
                    <h4 className="font-medium text-blue-900 mb-3">Select Target Documents:</h4>
                    <div className="flex items-center gap-4">
                      <label className="flex items-center gap-2">
                        <input
                          type="radio"
                          name="analysisScope"
                          value="all"
                          checked={selectedDocumentForAnalysis === null}
                          onChange={() => setSelectedDocumentForAnalysis(null)}
                          className="w-4 h-4"
                        />
                        <span className="text-sm text-blue-800">All Documents ({userDocuments.length})</span>
                      </label>
                      
                      <select
                        value={selectedDocumentForAnalysis || ''}
                        onChange={(e) => setSelectedDocumentForAnalysis(e.target.value || null)}
                        className="bg-white border border-blue-300 rounded px-3 py-1 text-sm"
                      >
                        <option value="">Select Specific Document...</option>
                        {documentAnalyses.map(doc => (
                          <option key={doc.id} value={doc.id}>{doc.filename}</option>
                        ))}
                      </select>
                    </div>
                  </div>

                  {/* Analysis Tools Grid */}
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                    {analysisTools.map((tool) => (
                      <div key={tool.id} className={`border border-gray-200 rounded-xl p-6 hover:shadow-sm transition-all ${
                        tool.isComprehensive ? 'ring-2 ring-green-200 bg-green-50' : ''
                      }`}>
                        <div className="flex items-start gap-4 mb-4">
                          <div className="text-2xl">{tool.icon}</div>
                          <div className="flex-1">
                            <h3 className="font-semibold text-gray-900 mb-1">
                              {tool.title}
                              {tool.isComprehensive && (
                                <span className="ml-2 text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full">
                                  RECOMMENDED
                                </span>
                              )}
                            </h3>
                            <p className="text-sm text-gray-600 mb-3">{tool.description}</p>
                            
                            <div className="flex items-center gap-2 mb-3">
                              <span className="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded-full">
                                {tool.category}
                              </span>
                              <span className={`text-xs px-2 py-1 rounded-full ${
                                tool.riskLevel === 'low' ? 'bg-green-100 text-green-700' :
                                tool.riskLevel === 'medium' ? 'bg-yellow-100 text-yellow-700' :
                                'bg-red-100 text-red-700'
                              }`}>
                                {tool.riskLevel} risk
                              </span>
                            </div>
                            
                            <div className="text-xs text-gray-500 mb-4">
                              <strong>Ideal for:</strong> {tool.idealFor.join(', ')}
                            </div>
                          </div>
                        </div>
                        
                        <button
                          onClick={() => runAnalysis(tool.id, selectedDocumentForAnalysis)}
                          disabled={isAnalyzing}
                          className={`w-full py-2 px-4 rounded-lg transition-all font-medium text-sm ${
                            tool.isComprehensive 
                              ? 'bg-green-600 text-white hover:bg-green-700 disabled:bg-gray-300'
                              : 'bg-slate-900 text-white hover:bg-slate-800 disabled:bg-gray-300'
                          } disabled:cursor-not-allowed`}
                        >
                          {isAnalyzing ? 'Running Analysis...' : 
                           tool.isComprehensive ? 'Run Complete Analysis' : 'Run Analysis'}
                        </button>
                        
                        {tool.isComprehensive && (
                          <p className="text-xs text-green-700 mt-2 text-center">
                            üöÄ Runs all analyses at once - most efficient option!
                          </p>
                        )}
                      </div>
                    ))}
                  </div>

                  {/* Analysis Tips */}
                  <div className="mt-8 p-4 bg-yellow-50 rounded-lg border border-yellow-200">
                    <h4 className="font-medium text-yellow-900 mb-2">üí° Analysis Tips:</h4>
                    <ul className="text-sm text-yellow-800 space-y-1">
                      <li>‚Ä¢ <strong>Complete Document Analysis</strong> is recommended - it runs all tools at once for comprehensive insights</li>
                      <li>‚Ä¢ Select "All Documents" to analyze your entire document collection</li>
                      <li>‚Ä¢ Choose specific documents for targeted analysis</li>
                      <li>‚Ä¢ Results include confidence scores and source citations</li>
                      <li>‚Ä¢ All analyses can be downloaded as text reports</li>
                    </ul>
                  </div>
                </>
              )}
            </div>
          )}
          
          {/* Results Tab */}
          {activeTab === 'results' && isBackendConfigured && (
            <div className="bg-white rounded-2xl shadow-sm border border-gray-100 p-8">
              <div className="flex items-center justify-between mb-6">
                <h2 className="text-2xl font-semibold text-gray-900">Analysis Results</h2>
                <div className="flex items-center gap-4 text-sm text-gray-500">
                  <span>{analysisResults.length} result{analysisResults.length !== 1 ? 's' : ''}</span>
                  {analysisResults.length > 0 && (
                    <button
                      onClick={() => setAnalysisResults([])}
                      className="text-red-600 hover:text-red-700 font-medium"
                    >
                      Clear All Results
                    </button>
                  )}
                </div>
              </div>
              
              {analysisResults.length === 0 ? (
                <div className="text-center py-12">
                  <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
                    <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
                    </svg>
                  </div>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No analysis results</h3>
                  <p className="text-gray-600 mb-4">Run analysis tools to see comprehensive results here</p>
                  <button
                    onClick={() => setActiveTab('analysis')}
                    className="bg-slate-900 text-white px-6 py-3 rounded-lg hover:bg-slate-800 transition-all font-medium"
                  >
                    Go to Analysis Tools
                  </button>
                </div>
              ) : (
                <div className="space-y-6">
                  {analysisResults.map((result) => (
                    <div key={result.id} className="border border-gray-200 rounded-xl p-6">
                      <div className="flex items-start justify-between mb-4">
                        <div className="flex-1">
                          <div className="flex items-center gap-3 mb-2">
                            <h3 className="font-semibold text-gray-900">{result.toolTitle}</h3>
                            <span className={`text-xs px-2 py-1 rounded-full font-medium ${getStatusColor(result.status)}`}>
                              {result.status}
                            </span>
                            {result.confidence && (
                              <span className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-full">
                                {Math.round(result.confidence * 100)}% confidence
                              </span>
                            )}
                            {result.analysisType === 'comprehensive' && (
                              <span className="text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full">
                                COMPLETE ANALYSIS
                              </span>
                            )}
                          </div>
                          <p className="text-sm text-gray-600">
                            {result.timestamp} ‚Ä¢ {result.document}
                            {result.documentId && result.documentId !== 'all' && (
                              <span className="ml-2 text-blue-600">‚Ä¢ Specific Document</span>
                            )}
                          </p>
                        </div>
                        <div className="flex items-center gap-2">
                          {/* Rerun Analysis Button */}
                          {result.documentId && result.documentId !== 'all' && (
                            <button
                              onClick={() => runComprehensiveDocumentAnalysis(result.documentId)}
                              disabled={isAnalyzing}
                              className="text-blue-600 hover:text-blue-700 p-2 hover:bg-blue-50 rounded-lg transition-all"
                              title="Rerun analysis"
                            >
                              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
                              </svg>
                            </button>
                          )}
                          
                          {/* Download Button */}
                          <button
                            onClick={() => downloadResult(result.id)}
                            className="text-gray-600 hover:text-gray-700 p-2 hover:bg-gray-50 rounded-lg transition-all"
                            title="Download result"
                          >
                            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
                            </svg>
                          </button>
                        </div>
                      </div>
                      
                      <div className="bg-gray-50 rounded-lg p-4 mb-4">
                        <div 
                          className="prose prose-sm max-w-none text-gray-800"
                          dangerouslySetInnerHTML={{ __html: renderMarkdown(result.analysis) }}
                        />
                      </div>
                      
                      {result.warnings && result.warnings.length > 0 && (
                        <div className="bg-amber-50 border border-amber-200 rounded-lg p-3 mb-4">
                          <div className="flex items-start gap-2">
                            <svg className="w-5 h-5 text-amber-600 flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
                              <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
                            </svg>
                            <div>
                              <p className="text-sm font-medium text-amber-800 mb-1">Warnings:</p>
                              <ul className="text-sm text-amber-700 space-y-1">
                                {result.warnings.map((warning, i) => (
                                  <li key={i}>‚Ä¢ {warning}</li>
                                ))}
                              </ul>
                            </div>
                          </div>
                        </div>
                      )}
                      
                      {result.sources && result.sources.length > 0 && (
                        <div className="border-t border-gray-200 pt-4">
                          <p className="text-sm font-medium text-gray-900 mb-2">Sources:</p>
                          <div className="space-y-1">
                            {result.sources.slice(0, 5).map((source: any, i: number) => (
                              <p key={i} className="text-xs text-gray-600">
                                ‚Ä¢ {source.file_name} {source.page && `(Page ${source.page})`}
                                {source.relevance && ` - ${Math.round(source.relevance * 100)}% relevant`}
                              </p>
                            ))}
                            {result.sources.length > 5 && (
                              <p className="text-xs text-gray-500">
                                +{result.sources.length - 5} more sources
                              </p>
                            )}
                          </div>
                        </div>
                      )}
                    </div>
                  ))}
                </div>
              )}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}
