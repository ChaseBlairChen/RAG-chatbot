venv) ubuntu@ip-172-31-28-197:~/RAG-chatbot/frontend$ cat all_files_combined.txt
// ==================== ./src/App.tsx ====================
// App.tsx
import React, { useState, useEffect, useMemo } from 'react';
import { AuthProvider, useAuth } from './contexts/AuthContext';
import { BackendProvider, useBackend } from './contexts/BackendContext';
import { ApiService } from './services/api';
import { LoginScreen } from './components/auth/LoginScreen';
import { AppHeader } from './components/layout/AppHeader';
import { BackendWarning } from './components/layout/BackendWarning';
import { TabNavigation } from './components/layout/TabNavigation';
import { DisconnectedView } from './components/layout/DisconnectedView';
import { ChatTab } from './components/chat/ChatTab';
import { UploadTab } from './components/upload/UploadTab';
import { DocumentsTab } from './components/documents/DocumentsTab';
import { AnalysisTab } from './components/analysis/AnalysisTab';
import { ResultsTab } from './components/results/ResultsTab';
import { useChat } from './hooks/useChat';
import { useDocuments } from './hooks/useDocuments';
import { useAnalysis } from './hooks/useAnalysis';

function MainApp() {
  const { isLoggedIn, currentUser, apiToken } = useAuth();
  const { backendUrl, isBackendConfigured } = useBackend();
  const [activeTab, setActiveTab] = useState('chat');

  // Create API service instance
  const apiService = useMemo(() => {
    return new ApiService(backendUrl, apiToken);
  }, [backendUrl, apiToken]);

  // Use hooks
  const { messages, isLoading, sessionId, sendMessage, addWelcomeMessage } = useChat(apiService);
  const {
    userDocuments,
    documentAnalyses,
    uploadQueue,
    currentlyUploading,
    uploadProgress,
    uploadResults,
    uploadStatuses,
    setDocumentAnalyses,
    loadUserDocuments,
    handleFileUpload,
    uploadAllDocuments,
    deleteDocument,
    removeFromQueue,
    clearQueue,
    clearStatuses
  } = useDocuments(apiService, isBackendConfigured);
  
  const {
    analysisResults,
    isAnalyzing,
    selectedDocumentForAnalysis,
    setSelectedDocumentForAnalysis,
    runAnalysis,
    runComprehensiveDocumentAnalysis,
    downloadResult,
    clearResults
  } = useAnalysis(apiService, documentAnalyses, setDocumentAnalyses, sessionId, currentUser?.user_id);

  // Initialize welcome message
  useEffect(() => {
    if (isLoggedIn && currentUser && messages.length === 0) {
      addWelcomeMessage(currentUser.username);
    }
  }, [isLoggedIn, currentUser, messages.length, addWelcomeMessage]);

  // Load documents when backend is configured
  useEffect(() => {
    if (isBackendConfigured) {
      loadUserDocuments();
    }
  }, [isBackendConfigured, loadUserDocuments]);

  // Handle logout cleanup
  useEffect(() => {
    if (!isLoggedIn) {
      clearStatuses();
      clearResults();
    }
  }, [isLoggedIn, clearStatuses, clearResults]);

  // Handle upload and analysis
  const handleUploadAll = async (runAnalysisAfter: boolean) => {
    const uploadedDocIds = await uploadAllDocuments(runAnalysisAfter);
    
    if (runAnalysisAfter && uploadedDocIds.length > 0) {
      setActiveTab('results');
      
      // Wait for processing to complete before running analysis
      setTimeout(async () => {
        for (const docId of uploadedDocIds) {
          try {
            await runComprehensiveDocumentAnalysis(docId);
          } catch (analysisError) {
            console.error(`Analysis failed for document ${docId}:`, analysisError);
          }
        }
      }, 5000);
    } else if (uploadedDocIds.length > 0) {
      setActiveTab('documents');
    }
  };

  if (!isLoggedIn) {
    return <LoginScreen />;
  }

  return (
    <div className="flex flex-col h-screen bg-stone-50">
      <AppHeader sessionId={sessionId} />
      <BackendWarning />
      <TabNavigation
        activeTab={activeTab}
        setActiveTab={setActiveTab}
        userDocumentsCount={userDocuments.length}
        analysisResultsCount={analysisResults.length}
        isBackendConfigured={isBackendConfigured}
      />

      <div className="flex-grow overflow-auto">
        <div className="w-full max-w-7xl mx-auto p-6">
          {!isBackendConfigured ? (
            <DisconnectedView />
          ) : (
            <>
              {activeTab === 'chat' && (
                <ChatTab
                  messages={messages}
                  isLoading={isLoading}
                  sessionId={sessionId}
                  sendMessage={sendMessage}
                />
              )}
              
              {activeTab === 'upload' && (
                <UploadTab
                  uploadQueue={uploadQueue}
                  currentlyUploading={currentlyUploading}
                  uploadProgress={uploadProgress}
                  uploadResults={uploadResults}
                  uploadStatuses={uploadStatuses}
                  isAnalyzing={isAnalyzing}
                  onFileSelect={handleFileUpload}
                  onRemoveFromQueue={removeFromQueue}
                  onClearQueue={clearQueue}
                  onUploadAll={handleUploadAll}
                  onSetActiveTab={setActiveTab}
                />
              )}
              
              {activeTab === 'documents' && (
                <DocumentsTab
                  documentAnalyses={documentAnalyses}
                  userDocuments={userDocuments}
                  isAnalyzing={isAnalyzing}
                  onAnalyze={runComprehensiveDocumentAnalysis}
                  onDelete={deleteDocument}
                  onSetActiveTab={setActiveTab}
                />
              )}
              
              {activeTab === 'analysis' && (
                <AnalysisTab
                  userDocuments={userDocuments}
                  documentAnalyses={documentAnalyses}
                  isAnalyzing={isAnalyzing}
                  selectedDocument={selectedDocumentForAnalysis}
                  setSelectedDocument={setSelectedDocumentForAnalysis}
                  onRunAnalysis={runAnalysis}
                  onSetActiveTab={setActiveTab}
                />
              )}
              
              {activeTab === 'results' && (
                <ResultsTab
                  analysisResults={analysisResults}
                  isAnalyzing={isAnalyzing}
                  onRerunAnalysis={runComprehensiveDocumentAnalysis}
                  onDownloadResult={(id) => downloadResult(id, currentUser)}
                  onClearResults={clearResults}
                  onSetActiveTab={setActiveTab}
                />
              )}
            </>
          )}
        </div>
      </div>
    </div>
  );
}

export default function App() {
  return (
    <AuthProvider>
      <BackendProvider>
        <MainApp />
      </BackendProvider>
    </AuthProvider>
  );
}



// ==================== ./src/components/analysis/AnalysisTab.tsx ====================
// components/analysis/AnalysisTab.tsx
import React from 'react';
import { DocumentAnalysis } from '../../types';
import { ANALYSIS_TOOLS } from '../../utils/constants';
import { AnalysisToolCard } from './AnalysisToolCard';
import { DocumentSelector } from './DocumentSelector';
import { EmptyState } from '../common/EmptyState';

interface AnalysisTabProps {
  userDocuments: any[];
  documentAnalyses: DocumentAnalysis[];
  isAnalyzing: boolean;
  selectedDocument: string | null;
  setSelectedDocument: (value: string | null) => void;
  onRunAnalysis: (toolId: string, documentId?: string) => void;
  onSetActiveTab: (tab: string) => void;
}

export const AnalysisTab: React.FC<AnalysisTabProps> = ({
  userDocuments,
  documentAnalyses,
  isAnalyzing,
  selectedDocument,
  setSelectedDocument,
  onRunAnalysis,
  onSetActiveTab
}) => {
  return (
    <div className="bg-white rounded-2xl shadow-sm border border-gray-100 p-8">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-semibold text-gray-900">Analysis Tools</h2>
        <div className="text-sm text-gray-500">
          {userDocuments.length > 0 && `${userDocuments.length} document${userDocuments.length !== 1 ? 's' : ''} available`}
        </div>
      </div>
      
      {userDocuments.length === 0 ? (
        <EmptyState
          icon={
            <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
            </svg>
          }
          title="No documents to analyze"
          description="Upload documents first to run analysis tools"
          action={{
            label: "Upload Documents",
            onClick: () => onSetActiveTab('upload')
          }}
        />
      ) : (
        <>
          <DocumentSelector
            selectedDocument={selectedDocument}
            setSelectedDocument={setSelectedDocument}
            documentAnalyses={documentAnalyses}
            userDocumentsCount={userDocuments.length}
          />

          {/* Analysis Tools Grid */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {ANALYSIS_TOOLS.map((tool) => (
              <AnalysisToolCard
                key={tool.id}
                tool={tool}
                isAnalyzing={isAnalyzing}
                selectedDocument={selectedDocument}
                onRunAnalysis={onRunAnalysis}
              />
            ))}
          </div>

          {/* Analysis Tips */}
          <div className="mt-8 p-4 bg-yellow-50 rounded-lg border border-yellow-200">
            <h4 className="font-medium text-yellow-900 mb-2">💡 Analysis Tips:</h4>
            <ul className="text-sm text-yellow-800 space-y-1">
              <li>• <strong>Complete Document Analysis</strong> is recommended - it runs all tools at once for comprehensive insights</li>
              <li>• Select "All Documents" to analyze your entire document collection</li>
              <li>• Choose specific documents for targeted analysis</li>
              <li>• Results include confidence scores and source citations</li>
              <li>• All analyses can be downloaded as text reports</li>
            </ul>
          </div>
        </>
      )}
    </div>
  );
};



// ==================== ./src/components/analysis/AnalysisToolCard.tsx ====================
// components/analysis/AnalysisToolCard.tsx
import React from 'react';
import { AnalysisTool } from '../../types';

interface AnalysisToolCardProps {
  tool: AnalysisTool;
  isAnalyzing: boolean;
  selectedDocument: string | null;
  onRunAnalysis: (toolId: string, documentId?: string) => void;
}

export const AnalysisToolCard: React.FC<AnalysisToolCardProps> = ({
  tool,
  isAnalyzing,
  selectedDocument,
  onRunAnalysis
}) => {
  return (
    <div className={`border border-gray-200 rounded-xl p-6 hover:shadow-sm transition-all ${
      tool.isComprehensive ? 'ring-2 ring-green-200 bg-green-50' : ''
    }`}>
      <div className="flex items-start gap-4 mb-4">
        <div className="text-2xl">{tool.icon}</div>
        <div className="flex-1">
          <h3 className="font-semibold text-gray-900 mb-1">
            {tool.title}
            {tool.isComprehensive && (
              <span className="ml-2 text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full">
                RECOMMENDED
              </span>
            )}
          </h3>
          <p className="text-sm text-gray-600 mb-3">{tool.description}</p>
          
          <div className="flex items-center gap-2 mb-3">
            <span className="text-xs bg-gray-100 text-gray-700 px-2 py-1 rounded-full">
              {tool.category}
            </span>
            <span className={`text-xs px-2 py-1 rounded-full ${
              tool.riskLevel === 'low' ? 'bg-green-100 text-green-700' :
              tool.riskLevel === 'medium' ? 'bg-yellow-100 text-yellow-700' :
              'bg-red-100 text-red-700'
            }`}>
              {tool.riskLevel} risk
            </span>
          </div>
          
          <div className="text-xs text-gray-500 mb-4">
            <strong>Ideal for:</strong> {tool.idealFor.join(', ')}
          </div>
        </div>
      </div>
      
      <button
        onClick={() => onRunAnalysis(tool.id, selectedDocument || undefined)}
        disabled={isAnalyzing}
        className={`w-full py-2 px-4 rounded-lg transition-all font-medium text-sm ${
          tool.isComprehensive 
            ? 'bg-green-600 text-white hover:bg-green-700 disabled:bg-gray-300'
            : 'bg-stone-800 text-white hover:bg-stone-900 disabled:bg-gray-300'
        } disabled:cursor-not-allowed`}
      >
        {isAnalyzing ? 'Running Analysis...' : 
         tool.isComprehensive ? 'Run Complete Analysis' : 'Run Analysis'}
      </button>
      
      {tool.isComprehensive && (
        <p className="text-xs text-green-700 mt-2 text-center">
          🚀 Runs all analyses at once - most efficient option!
        </p>
      )}
    </div>
  );
};



// ==================== ./src/components/analysis/DocumentSelector.tsx ====================
// components/analysis/DocumentSelector.tsx
import React from 'react';
import { DocumentAnalysis } from '../../types';

interface DocumentSelectorProps {
  selectedDocument: string | null;
  setSelectedDocument: (value: string | null) => void;
  documentAnalyses: DocumentAnalysis[];
  userDocumentsCount: number;
}

export const DocumentSelector: React.FC<DocumentSelectorProps> = ({
  selectedDocument,
  setSelectedDocument,
  documentAnalyses,
  userDocumentsCount
}) => {
  return (
    <div className="mb-6 p-4 bg-stone-100 rounded-lg border border-stone-200">
      <h4 className="font-medium text-stone-900 mb-3">Select Target Documents:</h4>
      <div className="flex items-center gap-4">
        <label className="flex items-center gap-2">
          <input
            type="radio"
            name="analysisScope"
            value="all"
            checked={selectedDocument === null}
            onChange={() => setSelectedDocument(null)}
            className="w-4 h-4"
          />
          <span className="text-sm text-stone-800">All Documents ({userDocumentsCount})</span>
        </label>
        
        <select
          value={selectedDocument || ''}
          onChange={(e) => setSelectedDocument(e.target.value || null)}
          className="bg-white border border-stone-300 rounded px-3 py-1 text-sm"
        >
          <option value="">Select Specific Document...</option>
          {documentAnalyses.map(doc => (
            <option key={doc.id} value={doc.id}>{doc.filename}</option>
          ))}
        </select>
      </div>
    </div>
  );
};



// ==================== ./src/components/auth/LoginScreen.tsx ====================
// components/auth/LoginScreen.tsx
import React, { useState } from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { TEST_ACCOUNTS, DEFAULT_BACKEND_URL } from '../../utils/constants';

export const LoginScreen: React.FC = () => {
  const { login } = useAuth();
  const [loginForm, setLoginForm] = useState({ username: '', password: '' });
  const [loginError, setLoginError] = useState('');
  const [isLoggingIn, setIsLoggingIn] = useState(false);

  const handleLogin = async (e: React.FormEvent) => {
    e.preventDefault();
    setIsLoggingIn(true);
    setLoginError('');

    const result = await login(loginForm.username, loginForm.password);
    
    if (!result.success) {
      setLoginError(result.error || 'Login failed');
    } else {
      setLoginForm({ username: '', password: '' });
    }
    
    setIsLoggingIn(false);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-stone-50 via-neutral-50 to-stone-100 flex items-center justify-center p-6">
      <div className="w-full max-w-md">
        {/* Logo/Header */}
        <div className="text-center mb-8">
          <div className="w-20 h-20 bg-gradient-to-br from-stone-200 to-stone-300 rounded-2xl flex items-center justify-center mx-auto mb-4 shadow-lg">
            <svg className="w-10 h-10 text-stone-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16H9m3 0h3" />
            </svg>
          </div>
          <h1 className="text-3xl font-bold text-stone-900 mb-2">Legally</h1>
          <p className="text-stone-600">— powered by AI</p>
        </div>

        {/* Login Form */}
        <div className="bg-white rounded-2xl shadow-2xl p-8">
          <form onSubmit={handleLogin} className="space-y-6">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Username
              </label>
              <input
                type="text"
                value={loginForm.username}
                onChange={(e) => setLoginForm(prev => ({ ...prev, username: e.target.value }))}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Enter your username"
                required
              />
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Password
              </label>
              <input
                type="password"
                value={loginForm.password}
                onChange={(e) => setLoginForm(prev => ({ ...prev, password: e.target.value }))}
                className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                placeholder="Enter your password"
                required
              />
            </div>

            {loginError && (
              <div className="bg-red-50 border border-red-200 rounded-lg p-3">
                <p className="text-red-800 text-sm">{loginError}</p>
              </div>
            )}

            <button
              type="submit"
              disabled={isLoggingIn}
              className="w-full bg-stone-800 text-white py-3 px-4 rounded-lg hover:bg-stone-900 disabled:opacity-50 disabled:cursor-not-allowed transition-all font-medium"
            >
              {isLoggingIn ? (
                <div className="flex items-center justify-center">
                  <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
                  Logging in...
                </div>
              ) : (
                'Sign In'
              )}
            </button>
          </form>

          {/* Test Accounts Info */}
          <div className="mt-8 pt-6 border-t border-gray-200">
            <h3 className="text-sm font-medium text-gray-700 mb-3">Test Accounts:</h3>
            <div className="space-y-2 text-xs">
              {TEST_ACCOUNTS.map((account, index) => (
                <div key={index} className="flex justify-between items-center p-2 bg-gray-50 rounded">
                  <span className="font-medium">{account.username}</span>
                  <span className="text-gray-600">{account.password}</span>
                  <span className={`px-2 py-1 rounded-full text-xs ${
                    account.subscription_tier === 'premium' ? 'bg-blue-100 text-blue-700' : 'bg-gray-100 text-gray-700'
                  }`}>
                    {account.subscription_tier}
                    {account.subscription_tier === 'premium' && <span className="ml-1">🔗</span>}
                  </span>
                </div>
              ))}
              <button
                type="button"
                onClick={() => setLoginForm({ username: 'demo', password: 'demo123' })}
                className="text-stone-700 hover:text-stone-900 text-xs font-medium"
              >
                Quick Login as Demo User (Free)
              </button>
            </div>
            <div className="mt-3 p-2 bg-stone-100 rounded text-xs text-stone-700">
              <strong>🔗 Premium users</strong> have access to external legal databases (LexisNexis, Westlaw)
            </div>
          </div>
        </div>

        {/* Footer */}
        <div className="text-center mt-6 text-stone-500 text-sm">
          <p>Legally — powered by AI</p>
          <p className="text-xs mt-1">Secure Legal Document Analysis Platform</p>
          <p className="text-xs mt-1">Connected to: {DEFAULT_BACKEND_URL}</p>
        </div>
      </div>
    </div>
  );
};



// ==================== ./src/components/chat/ChatInput.tsx ====================
// components/chat/ChatInput.tsx
import React from 'react';

interface ChatInputProps {
  input: string;
  setInput: (value: string) => void;
  onSend: () => void;
  isLoading: boolean;
  responseStyle: string;
  setResponseStyle: (value: string) => void;
  searchScope: string;
  setSearchScope: (value: string) => void;
  useEnhancedRag: boolean;
  setUseEnhancedRag: (value: boolean) => void;
}

export const ChatInput: React.FC<ChatInputProps> = ({
  input,
  setInput,
  onSend,
  isLoading,
  responseStyle,
  setResponseStyle,
  searchScope,
  setSearchScope,
  useEnhancedRag,
  setUseEnhancedRag
}) => {
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      onSend();
    }
  };

  return (
    <div className="p-6 border-t border-gray-100 bg-gray-50">
      <div className="flex items-center gap-4 mb-4 text-sm">
        <div className="flex items-center gap-2">
          <label className="text-gray-600">Style:</label>
          <select 
            value={responseStyle} 
            onChange={(e) => setResponseStyle(e.target.value)}
            className="bg-white border border-gray-200 rounded px-2 py-1 text-sm"
          >
            <option value="concise">Concise</option>
            <option value="balanced">Balanced</option>
            <option value="detailed">Detailed</option>
          </select>
        </div>
        
        <div className="flex items-center gap-2">
          <label className="text-gray-600">Search:</label>
          <select 
            value={searchScope} 
            onChange={(e) => setSearchScope(e.target.value)}
            className="bg-white border border-gray-200 rounded px-2 py-1 text-sm"
          >
            <option value="all">All Sources</option>
            <option value="user_only">My Documents Only</option>
            <option value="default_only">Default Database Only</option>
          </select>
        </div>
        
        <div className="flex items-center gap-2">
          <label className="flex items-center gap-1 text-gray-600">
            <input 
              type="checkbox" 
              checked={useEnhancedRag} 
              onChange={(e) => setUseEnhancedRag(e.target.checked)}
              className="w-4 h-4"
            />
            Enhanced RAG
          </label>
        </div>
      </div>
      
      <div className="flex gap-3">
        <input
          type="text"
          value={input}
          onChange={(e) => setInput(e.target.value)}
          onKeyPress={handleKeyPress}
          placeholder="Ask a legal question..."
          className="flex-1 px-4 py-3 border border-gray-200 rounded-xl focus:outline-none focus:ring-2 focus:ring-slate-500 focus:border-transparent"
          disabled={isLoading}
        />
        <button
          onClick={onSend}
          disabled={isLoading || !input.trim()}
          className="bg-slate-900 text-white px-6 py-3 rounded-xl hover:bg-slate-800 disabled:bg-gray-300 disabled:cursor-not-allowed transition-all font-medium"
        >
          Send
        </button>
      </div>
    </div>
  );
};



// ==================== ./src/components/chat/ChatTab.tsx ====================
// components/chat/ChatTab.tsx
import React, { useState } from 'react';
import { MessageList } from './MessageList';
import { ChatInput } from './ChatInput';
import { Message } from '../../types';

interface ChatTabProps {
  messages: Message[];
  isLoading: boolean;
  sessionId: string;
  sendMessage: (input: string, responseStyle: string, searchScope: string, useEnhancedRag: boolean, expandRequest?: boolean) => Promise<void>;
}

export const ChatTab: React.FC<ChatTabProps> = ({ messages, isLoading, sessionId, sendMessage }) => {
  const [input, setInput] = useState('');
  const [responseStyle, setResponseStyle] = useState('balanced');
  const [searchScope, setSearchScope] = useState('all');
  const [useEnhancedRag, setUseEnhancedRag] = useState(true);

  const handleSend = () => {
    if (input.trim() && !isLoading) {
      sendMessage(input, responseStyle, searchScope, useEnhancedRag);
      setInput('');
    }
  };

  const requestExpansion = (messageText: string) => {
    const expansionInput = `Please expand on: ${messageText.slice(0, 100)}...`;
    sendMessage(expansionInput, responseStyle, searchScope, useEnhancedRag, true);
  };

  return (
    <div className="bg-white rounded-2xl shadow-sm border border-gray-100 h-[calc(100vh-200px)] flex flex-col overflow-hidden">
      <MessageList 
        messages={messages} 
        isLoading={isLoading}
        onRequestExpansion={requestExpansion}
      />
      <ChatInput
        input={input}
        setInput={setInput}
        onSend={handleSend}
        isLoading={isLoading}
        responseStyle={responseStyle}
        setResponseStyle={setResponseStyle}
        searchScope={searchScope}
        setSearchScope={setSearchScope}
        useEnhancedRag={useEnhancedRag}
        setUseEnhancedRag={setUseEnhancedRag}
      />
    </div>
  );
};



// ==================== ./src/components/chat/MessageItem.tsx ====================
// components/chat/MessageItem.tsx
import React from 'react';
import { Message } from '../../types';
import { renderMarkdown } from '../../utils/markdown';

interface MessageItemProps {
  message: Message;
  onRequestExpansion?: (text: string) => void;
}

export const MessageItem: React.FC<MessageItemProps> = ({ message, onRequestExpansion }) => {
  return (
    <div className={`flex ${message.from === 'user' ? 'justify-end' : 'justify-start'}`}>
      <div className={`max-w-3xl rounded-2xl px-4 py-3 ${
        message.from === 'user' 
          ? 'bg-slate-900 text-white' 
          : 'bg-gray-50 text-gray-900 border border-gray-100'
      }`}>
        <div 
          className="prose prose-sm max-w-none"
          dangerouslySetInnerHTML={{ __html: renderMarkdown(message.text) }}
        />
        
        {message.from === 'bot' && (message.confidence || (message.sources && message.sources.length > 0)) && (
          <div className="mt-3 pt-3 border-t border-gray-200 text-xs text-gray-500">
            {message.confidence && (
              <div className="flex items-center gap-2 mb-2">
                <span>Confidence:</span>
                <div className="flex-1 bg-gray-200 rounded-full h-2 max-w-20">
                  <div 
                    className="bg-blue-500 h-2 rounded-full transition-all" 
                    style={{ width: `${(message.confidence * 100)}%` }}
                  />
                </div>
                <span>{Math.round((message.confidence || 0) * 100)}%</span>
              </div>
            )}
            {message.sources && message.sources.length > 0 && (
              <div>
                <span className="font-medium">Sources: </span>
                {message.sources.slice(0, 3).map((source: any, i: number) => (
                  <span key={i} className="mr-2">
                    {source.file_name}
                    {i < Math.min(message.sources!.length - 1, 2) ? ',' : ''}
                  </span>
                ))}
                {message.sources.length > 3 && <span>+{message.sources.length - 3} more</span>}
              </div>
            )}
          </div>
        )}
        
        {message.from === 'bot' && message.expandAvailable && onRequestExpansion && (
          <button
            onClick={() => onRequestExpansion(message.text)}
            className="mt-2 text-xs bg-blue-50 text-blue-600 px-3 py-1 rounded-full hover:bg-blue-100 transition-all"
          >
            Expand Answer
          </button>
        )}
      </div>
    </div>
  );
};



// ==================== ./src/components/chat/MessageList.tsx ====================
// components/chat/MessageList.tsx
import React, { useRef, useEffect } from 'react';
import { Message } from '../../types';
import { MessageItem } from './MessageItem';

interface MessageListProps {
  messages: Message[];
  isLoading: boolean;
  onRequestExpansion: (text: string) => void;
}

export const MessageList: React.FC<MessageListProps> = ({ messages, isLoading, onRequestExpansion }) => {
  const messagesEndRef = useRef<null | HTMLDivElement>(null);

  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  return (
    <div className="flex-grow overflow-y-auto p-6 space-y-4">
      {messages.map((msg, idx) => (
        <MessageItem 
          key={idx} 
          message={msg} 
          onRequestExpansion={onRequestExpansion}
        />
      ))}
      
      {isLoading && (
        <div className="flex justify-start">
          <div className="bg-gray-50 rounded-2xl px-4 py-3 border border-gray-100">
            <div className="flex items-center gap-2">
              <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" />
              <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }} />
              <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }} />
              <span className="text-sm text-gray-500 ml-2">AI is thinking...</span>
            </div>
          </div>
        </div>
      )}
      
      <div ref={messagesEndRef} />
    </div>
  );
};



// ==================== ./src/components/common/EmptyState.tsx ====================
// components/common/EmptyState.tsx
import React from 'react';

interface EmptyStateProps {
  icon: React.ReactNode;
  title: string;
  description: string;
  action?: {
    label: string;
    onClick: () => void;
  };
}

export const EmptyState: React.FC<EmptyStateProps> = ({ icon, title, description, action }) => {
  return (
    <div className="text-center py-12">
      <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
        {icon}
      </div>
      <h3 className="text-lg font-medium text-gray-900 mb-2">{title}</h3>
      <p className="text-gray-600 mb-4">{description}</p>
      {action && (
        <button
          onClick={action.onClick}
          className="bg-stone-800 text-white px-6 py-3 rounded-lg hover:bg-stone-900 transition-all font-medium"
        >
          {action.label}
        </button>
      )}
    </div>
  );
};



// ==================== ./src/components/common/LoadingSpinner.tsx ====================
// components/common/LoadingSpinner.tsx
import React from 'react';

interface LoadingSpinnerProps {
  message?: string;
}

export const LoadingSpinner: React.FC<LoadingSpinnerProps> = ({ message = 'Loading...' }) => {
  return (
    <div className="flex items-center justify-center">
      <div className="w-5 h-5 border-2 border-white border-t-transparent rounded-full animate-spin mr-2" />
      {message}
    </div>
  );
};



// ==================== ./src/components/documents/DocumentItem.tsx ====================
// components/documents/DocumentItem.tsx
import React from 'react';
import { DocumentAnalysis } from '../../types';

interface DocumentItemProps {
  document: DocumentAnalysis;
  isAnalyzing: boolean;
  onAnalyze: (docId: string) => void;
  onDelete: (docId: string) => void;
}

export const DocumentItem: React.FC<DocumentItemProps> = ({ 
  document, 
  isAnalyzing, 
  onAnalyze, 
  onDelete 
}) => {
  return (
    <div className="border border-gray-200 rounded-lg p-4 hover:shadow-sm transition-all">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <div className="w-10 h-10 bg-stone-100 rounded-lg flex items-center justify-center">
            <svg className="w-5 h-5 text-stone-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
          </div>
          <div>
            <h4 className="font-medium text-gray-900">{document.filename}</h4>
            <p className="text-sm text-gray-600">
              Uploaded {new Date(document.uploadedAt).toLocaleDateString()} • {document.pagesProcessed} pages
              {document.lastAnalyzed && (
                <span className="ml-2 text-green-600">
                  • Analyzed {new Date(document.lastAnalyzed).toLocaleDateString()}
                </span>
              )}
            </p>
          </div>
        </div>
        <div className="flex items-center gap-2">
          <button
            onClick={() => onAnalyze(document.id)}
            disabled={isAnalyzing}
            className="bg-green-600 text-white px-3 py-2 rounded-lg hover:bg-green-700 disabled:bg-gray-300 transition-all font-medium text-sm"
            title="Run comprehensive analysis"
          >
            {isAnalyzing ? 'Analyzing...' : '🔍 Analyze'}
          </button>
          
          <button
            onClick={() => onDelete(document.id)}
            className="text-red-600 hover:text-red-700 p-2 hover:bg-red-50 rounded-lg transition-all"
            title="Delete document"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
            </svg>
          </button>
        </div>
      </div>
      
      {document.confidence && (
        <div className="mt-3 pt-3 border-t border-gray-200">
          <div className="flex items-center justify-between text-sm text-gray-600">
            <span>Last Analysis Confidence:</span>
            <div className="flex items-center gap-2">
              <div className="w-16 bg-gray-200 rounded-full h-2">
                <div 
                  className="bg-green-500 h-2 rounded-full transition-all" 
                  style={{ width: `${(document.confidence * 100)}%` }}
                />
              </div>
              <span className="text-xs font-medium">{Math.round(document.confidence * 100)}%</span>
            </div>
          </div>
        </div>
      )}
    </div>
  );
};



// ==================== ./src/components/documents/DocumentsTab.tsx ====================
// components/documents/DocumentsTab.tsx
import React from 'react';
import { DocumentAnalysis } from '../../types';
import { DocumentItem } from './DocumentItem';
import { EmptyState } from '../common/EmptyState';

interface DocumentsTabProps {
  documentAnalyses: DocumentAnalysis[];
  userDocuments: any[];
  isAnalyzing: boolean;
  onAnalyze: (docId: string) => void;
  onDelete: (docId: string) => void;
  onSetActiveTab: (tab: string) => void;
}

export const DocumentsTab: React.FC<DocumentsTabProps> = ({
  documentAnalyses,
  userDocuments,
  isAnalyzing,
  onAnalyze,
  onDelete,
  onSetActiveTab
}) => {
  return (
    <div className="bg-white rounded-2xl shadow-sm border border-gray-100 p-8">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-semibold text-gray-900">My Documents</h2>
        <div className="text-sm text-gray-500">
          {userDocuments.length} document{userDocuments.length !== 1 ? 's' : ''}
        </div>
      </div>
      
      {userDocuments.length === 0 ? (
        <EmptyState
          icon={
            <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
          }
          title="No documents uploaded"
          description="Upload your first legal document to get started"
          action={{
            label: "Upload Document",
            onClick: () => onSetActiveTab('upload')
          }}
        />
      ) : (
        <div className="space-y-4">
          {documentAnalyses.map((doc) => (
            <DocumentItem
              key={doc.id}
              document={doc}
              isAnalyzing={isAnalyzing}
              onAnalyze={onAnalyze}
              onDelete={onDelete}
            />
          ))}
        </div>
      )}
    </div>
  );
};



// ==================== ./src/components/layout/AppHeader.tsx ====================
// components/layout/AppHeader.tsx
import React from 'react';
import { useAuth } from '../../contexts/AuthContext';
import { useBackend } from '../../contexts/BackendContext';
import { getSubscriptionBadgeClass } from '../../utils/helpers';

interface AppHeaderProps {
  sessionId?: string;
}

export const AppHeader: React.FC<AppHeaderProps> = ({ sessionId }) => {
  const { currentUser, logout } = useAuth();
  const { isBackendConfigured, backendCapabilities } = useBackend();

  return (
    <header className="bg-white shadow-sm border-b border-gray-100">
      <div className="px-6 py-4">
        <div className="flex items-center justify-between max-w-7xl mx-auto">
          <div className="flex items-center gap-4">
            <div className="w-12 h-12 bg-stone-200 rounded-xl flex items-center justify-center shadow-sm">
              <svg className="w-7 h-7 text-stone-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M3 6l3 1m0 0l-3 9a5.002 5.002 0 006.001 0M6 7l3 9M6 7l6-2m6 2l3-1m-3 1l-3 9a5.002 5.002 0 006.001 0M18 7l3 9m-3-9l-6-2m0-2v2m0 16V5m0 16H9m3 0h3" />
              </svg>
            </div>
            <div>
              <h1 className="text-xl font-semibold text-gray-900">
                Legally
              </h1>
              <p className="text-xs text-gray-500">— powered by AI • Welcome, {currentUser?.username}</p>
            </div>
          </div>
          <div className="flex items-center gap-3">
            {/* User Info */}
            <div className="flex items-center gap-2 px-3 py-1.5 bg-gray-50 rounded-full">
              <div className="w-2 h-2 rounded-full bg-green-500" />
              <span className="text-sm text-gray-700">{currentUser?.username}</span>
            </div>

            {/* Subscription Badge */}
            <div className={`px-3 py-1.5 rounded-full text-xs font-medium ${getSubscriptionBadgeClass(currentUser?.subscription_tier || 'free')}`}>
              {currentUser?.subscription_tier.toUpperCase()}
              {currentUser?.subscription_tier === 'premium' && (
                <span className="ml-1" title="Has access to external legal databases">🔗</span>
              )}
            </div>

            {/* Backend Status */}
            <div className={`flex items-center gap-2 px-3 py-1.5 rounded-full text-xs font-medium ${
              isBackendConfigured 
                ? 'bg-emerald-50 text-emerald-700 border border-emerald-200' 
                : 'bg-rose-50 text-rose-700 border border-rose-200'
            }`}>
              <div className={`w-2 h-2 rounded-full ${isBackendConfigured ? 'bg-emerald-500' : 'bg-rose-500'} animate-pulse`} />
              <span>
                {isBackendConfigured 
                  ? `Connected` 
                  : 'Disconnected'
                }
              </span>
            </div>

            {/* Enhanced RAG Status */}
            {isBackendConfigured && backendCapabilities.enhancedRag && (
              <div className="flex items-center gap-2 px-3 py-1.5 rounded-full text-xs font-medium bg-stone-100 text-stone-700 border border-stone-200">
                <span>🧠</span>
                <span>Smart RAG</span>
              </div>
            )}
            
            {/* Logout Button */}
            <button
              onClick={logout}
              className="p-2 bg-gray-50 hover:bg-gray-100 rounded-lg transition-all hover:shadow-sm text-gray-600 hover:text-gray-700"
              title="Logout"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M17 16l4-4m0 0l-4-4m4 4H7m6 4v1a3 3 0 01-3 3H6a3 3 0 01-3-3V7a3 3 0 013-3h4a3 3 0 013 3v1" />
              </svg>
            </button>
            
            {sessionId && (
              <div className="text-xs text-gray-500 font-mono bg-gray-50 px-3 py-1.5 rounded-lg">
                Session: {sessionId.substring(0, 8)}
              </div>
            )}
          </div>
        </div>
      </div>
    </header>
  );
};



// ==================== ./src/components/layout/BackendWarning.tsx ====================
// components/layout/BackendWarning.tsx
import React from 'react';
import { useBackend } from '../../contexts/BackendContext';

export const BackendWarning: React.FC = () => {
  const { isBackendConfigured, connectionError } = useBackend();

  if (isBackendConfigured) return null;

  return (
    <div className="bg-amber-50 border-b border-amber-100 px-6 py-3">
      <div className="max-w-7xl mx-auto flex items-center gap-3">
        <svg className="w-5 h-5 text-amber-600 flex-shrink-0" fill="currentColor" viewBox="0 0 20 20">
          <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />
        </svg>
        <div className="flex-1">
          <p className="text-sm text-amber-800">
            {connectionError || "Connecting to backend server..."}
          </p>
        </div>
      </div>
    </div>
  );
};



// ==================== ./src/components/layout/DisconnectedView.tsx ====================
// components/layout/DisconnectedView.tsx
import React from 'react';
import { useBackend } from '../../contexts/BackendContext';

export const DisconnectedView: React.FC = () => {
  const { connectionError, testConnection } = useBackend();

  return (
    <div className="min-h-[calc(100vh-250px)] flex items-center justify-center">
      <div className="bg-white rounded-2xl shadow-sm border border-gray-100 p-12 text-center max-w-2xl">
        <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
          <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={1.5} d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
          </svg>
        </div>
        <h3 className="text-2xl font-semibold text-gray-900 mb-3">Connecting to Legally Backend</h3>
        <p className="text-gray-600 mb-6">
          Please wait while we connect to the Legally backend server...
        </p>
        {connectionError && (
          <div className="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
            <p className="text-red-800 text-sm">{connectionError}</p>
          </div>
        )}
        <div className="flex gap-3 justify-center">
          <button
            onClick={() => testConnection()}
            className="bg-stone-800 text-white px-6 py-3 rounded-lg hover:bg-stone-900 transition-all font-medium"
          >
            Retry Connection
          </button>
        </div>
      </div>
    </div>
  );
};



// ==================== ./src/components/layout/TabNavigation.tsx ====================
// components/layout/TabNavigation.tsx
import React from 'react';

interface Tab {
  id: string;
  label: string;
  icon: string;
  badge?: number | null;
}

interface TabNavigationProps {
  activeTab: string;
  setActiveTab: (tab: string) => void;
  userDocumentsCount: number;
  analysisResultsCount: number;
  isBackendConfigured: boolean;
}

export const TabNavigation: React.FC<TabNavigationProps> = ({
  activeTab,
  setActiveTab,
  userDocumentsCount,
  analysisResultsCount,
  isBackendConfigured
}) => {
  const tabs: Tab[] = [
    { id: 'chat', label: 'Smart Chat', icon: '💬' },
    { id: 'upload', label: 'Upload & Analyze', icon: '📤' },
    { id: 'documents', label: 'My Documents', icon: '📁', badge: userDocumentsCount > 0 ? userDocumentsCount : null },
    { id: 'analysis', label: 'Analysis Tools', icon: '🔍' },
  ];

  return (
    <nav className="bg-white border-b border-gray-100">
      <div className="max-w-7xl mx-auto px-6">
        <div className="flex space-x-8">
          {tabs.map(tab => (
            <button
              key={tab.id}
              onClick={() => setActiveTab(tab.id)}
              disabled={!isBackendConfigured}
              className={`relative py-4 px-1 text-sm font-medium transition-all border-b-2 ${
                activeTab === tab.id
                  ? 'text-slate-900 border-slate-900'
                  : 'text-gray-500 hover:text-gray-700 border-transparent hover:border-gray-300'
              } ${!isBackendConfigured ? 'cursor-not-allowed opacity-50' : ''}`}
            >
              <div className="flex items-center gap-2">
                <span className="text-base">{tab.icon}</span>
                <span>{tab.label}</span>
                {tab.badge && (
                  <span className="ml-1 bg-slate-900 text-white text-xs font-medium px-2 py-0.5 rounded-full">
                    {tab.badge}
                  </span>
                )}
              </div>
            </button>
          ))}
        </div>
      </div>
    </nav>
  );
};



// ==================== ./src/components/results/AnalysisResult.tsx ====================
// components/results/AnalysisResult.tsx
import React from 'react';
import { AnalysisResult as AnalysisResultType } from '../../types';
import { getStatusColor } from '../../utils/helpers';
import { renderMarkdown } from '../../utils/markdown';

interface AnalysisResultProps {
  result: AnalysisResultType;
  isAnalyzing: boolean;
  onRerun: (documentId: string) => void;
  onDownload: (resultId: number) => void;
}

export const AnalysisResultComponent: React.FC<AnalysisResultProps> = ({
  result,
  isAnalyzing,
  onRerun,
  onDownload
}) => {
  return (
    <div className="border border-gray-200 rounded-xl p-6">
      <div className="flex items-start justify-between mb-4">
        <div className="flex-1">
          <div className="flex items-center gap-3 mb-2">
            <h3 className="font-semibold text-gray-900">{result.toolTitle}</h3>
            <span className={`text-xs px-2 py-1 rounded-full font-medium ${getStatusColor(result.status)}`}>
              {result.status}
            </span>
            {result.confidence && (
              <span className="text-xs bg-stone-100 text-stone-700 px-2 py-1 rounded-full">
                {Math.round(result.confidence * 100)}% confidence
              </span>
            )}
            {result.analysisType === 'comprehensive' && (
              <span className="text-xs bg-green-100 text-green-700 px-2 py-1 rounded-full">
                COMPLETE ANALYSIS
              </span>
            )}
          </div>
          <p className="text-sm text-gray-600">
            {result.timestamp} • {result.document}
            {result.documentId && result.documentId !== 'all' && (
              <span className="ml-2 text-stone-600">• Specific Document</span>
            )}
          </p>
        </div>
        <div className="flex items-center gap-2">
          {result.documentId && result.documentId !== 'all' && (
            <button
              onClick={() => onRerun(result.documentId)}
              disabled={isAnalyzing}
              className="text-stone-700 hover:text-stone-900 p-2 hover:bg-stone-100 rounded-lg transition-all"
              title="Rerun analysis"
            >
              <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
              </svg>
            <div>
              <p className="text-sm font-medium text-amber-800 mb-1">Warnings:</p>
              <ul className="text-sm text-amber-700 space-y-1">
                {result.warnings.map((warning, i) => (
                  <li key={i}>• {warning}</li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      )}
      
      {result.sources && result.sources.length > 0 && (
        <div className="border-t border-gray-200 pt-4">
          <p className="text-sm font-medium text-gray-900 mb-2">Sources:</p>
          <div className="space-y-1">
            {result.sources.slice(0, 5).map((source: any, i: number) => (
              <p key={i} className="text-xs text-gray-600">
                • {source.file_name} {source.page && `(Page ${source.page})`}
                {source.relevance && ` - ${Math.round(source.relevance * 100)}% relevant`}
              </p>
            ))}
            {result.sources.length > 5 && (
              <p className="text-xs text-gray-500">
                +{result.sources.length - 5} more sources
              </p>
            )}
          </div>
        </div>
      )}
    </div>
  );
};
            </button>
          )}
          
          <button
            onClick={() => onDownload(result.id)}
            className="text-gray-600 hover:text-gray-700 p-2 hover:bg-gray-50 rounded-lg transition-all"
            title="Download result"
          >
            <svg className="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 10v6m0 0l-3-3m3 3l3-3m2 8H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
            </svg>
          </button>
        </div>
      </div>
      
      <div className="bg-gray-50 rounded-lg p-4 mb-4">
        <div 
          className="prose prose-sm max-w-none text-gray-800"
          dangerouslySetInnerHTML={{ __html: renderMarkdown(result.analysis) }}
        />
      </div>
      
      {result.warnings && result.warnings.length > 0 && (
        <div className="bg-amber-50 border border-amber-200 rounded-lg p-3 mb-4">
          <div className="flex items-start gap-2">
            <svg className="w-5 h-5 text-amber-600 flex-shrink-0 mt-0.5" fill="currentColor" viewBox="0 0 20 20">
              <path fillRule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clipRule="evenodd" />



// ==================== ./src/components/results/ResultsTab.tsx ====================
// components/results/ResultsTab.tsx
import React from 'react';
import { AnalysisResult } from '../../types';
import { AnalysisResultComponent } from './AnalysisResult';
import { EmptyState } from '../common/EmptyState';

interface ResultsTabProps {
  analysisResults: AnalysisResult[];
  isAnalyzing: boolean;
  onRerunAnalysis: (documentId: string) => void;
  onDownloadResult: (resultId: number) => void;
  onClearResults: () => void;
  onSetActiveTab: (tab: string) => void;
}

export const ResultsTab: React.FC<ResultsTabProps> = ({
  analysisResults,
  isAnalyzing,
  onRerunAnalysis,
  onDownloadResult,
  onClearResults,
  onSetActiveTab
}) => {
  return (
    <div className="bg-white rounded-2xl shadow-sm border border-gray-100 p-8">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-semibold text-gray-900">Analysis Results</h2>
        <div className="flex items-center gap-4 text-sm text-gray-500">
          <span>{analysisResults.length} result{analysisResults.length !== 1 ? 's' : ''}</span>
          {analysisResults.length > 0 && (
            <button
              onClick={onClearResults}
              className="text-red-600 hover:text-red-700 font-medium"
            >
              Clear All Results
            </button>
          )}
        </div>
      </div>
      
      {analysisResults.length === 0 ? (
        <EmptyState
          icon={
            <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z" />
            </svg>
          }
          title="No analysis results"
          description="Run analysis tools to see comprehensive results here"
          action={{
            label: "Go to Analysis Tools",
            onClick: () => onSetActiveTab('analysis')
          }}
        />
      ) : (
        <div className="space-y-6">
          {analysisResults.map((result) => (
            <AnalysisResultComponent
              key={result.id}
              result={result}
              isAnalyzing={isAnalyzing}
              onRerun={onRerunAnalysis}
              onDownload={onDownloadResult}
            />
          ))}
        </div>
      )}
    </div>
  );
};



// ==================== ./src/components/upload/UploadQueue.tsx ====================
// components/upload/UploadQueue.tsx
import React from 'react';

interface UploadQueueProps {
  uploadQueue: File[];
  currentlyUploading: File | null;
  uploadProgress: number;
  isAnalyzing: boolean;
  onRemoveFromQueue: (index: number) => void;
  onClearQueue: () => void;
  onUploadOnly: () => void;
  onUploadAndAnalyze: () => void;
}

export const UploadQueue: React.FC<UploadQueueProps> = ({
  uploadQueue,
  currentlyUploading,
  uploadProgress,
  isAnalyzing,
  onRemoveFromQueue,
  onClearQueue,
  onUploadOnly,
  onUploadAndAnalyze
}) => {
  if (uploadQueue.length === 0) return null;

  return (
    <div className="mt-6 p-4 bg-stone-100 rounded-lg border border-stone-200">
      <div className="flex items-center justify-between mb-4">
        <h4 className="font-medium text-stone-900">Upload Queue ({uploadQueue.length} files)</h4>
        <div className="flex gap-2">
          <button
            onClick={onClearQueue}
            className="text-stone-700 hover:text-stone-900 text-sm font-medium"
          >
            Clear All
          </button>
          <button
            onClick={onUploadOnly}
            disabled={isAnalyzing}
            className="bg-stone-700 text-white px-4 py-2 rounded-lg hover:bg-stone-800 disabled:bg-gray-300 transition-all font-medium text-sm"
          >
            {isAnalyzing ? 'Uploading...' : 'Upload Only'}
          </button>
          <button
            onClick={onUploadAndAnalyze}
            disabled={isAnalyzing}
            className="bg-green-700 text-white px-4 py-2 rounded-lg hover:bg-green-800 disabled:bg-gray-300 transition-all font-medium text-sm"
          >
            {isAnalyzing ? 'Processing...' : 'Upload & Analyze All'}
          </button>
        </div>
      </div>
      
      {/* File List */}
      <div className="space-y-2 max-h-40 overflow-y-auto">
        {uploadQueue.map((file, index) => (
          <div key={`${file.name}-${index}`} className="flex items-center justify-between bg-white rounded-lg p-3 border">
            <div className="flex items-center gap-3">
              <svg className="w-5 h-5 text-stone-700" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12h6m-6 4h6m2 5H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z" />
              </svg>
              <div>
                <p className="font-medium text-gray-900 text-sm">{file.name}</p>
                <p className="text-xs text-gray-600">
                  {(file.size / 1024 / 1024).toFixed(2)} MB
                </p>
              </div>
              {currentlyUploading === file && (
                <span className="text-xs bg-stone-200 text-stone-700 px-2 py-1 rounded-full">
                  Uploading...
                </span>
              )}
            </div>
            <button
              onClick={() => onRemoveFromQueue(index)}
              disabled={isAnalyzing}
              className="text-red-600 hover:text-red-700 p-1 disabled:opacity-50"
              title="Remove from queue"
            >
              <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
            </button>
          </div>
        ))}
      </div>
      
      {/* Progress Bar */}
      {isAnalyzing && (
        <div className="mt-4">
          <div className="flex items-center justify-between text-sm text-blue-700 mb-2">
            <span>Processing documents...</span>
            <span>{Math.round(uploadProgress)}%</span>
          </div>
          <div className="bg-blue-200 rounded-full h-2">
            <div 
              className="bg-blue-600 h-2 rounded-full transition-all duration-300" 
              style={{ width: `${uploadProgress}%` }}
            />
          </div>
          {currentlyUploading && (
            <p className="text-xs text-blue-600 mt-2">
              Currently uploading: {currentlyUploading.name}
            </p>
          )}
        </div>
      )}
    </div>
  );
};



// ==================== ./src/components/upload/UploadResults.tsx ====================
// components/upload/UploadResults.tsx
import React from 'react';

interface UploadResult {
  filename: string;
  success: boolean;
  pages_processed?: number;
  processing_time?: number;
  status?: string;
  error?: string;
  warnings?: string[];
}

interface UploadResultsProps {
  uploadResults: UploadResult[];
}

export const UploadResults: React.FC<UploadResultsProps> = ({ uploadResults }) => {
  if (uploadResults.length === 0) return null;

  return (
    <div className="mt-6 p-4 bg-gray-50 rounded-lg">
      <h4 className="font-medium text-gray-900 mb-3">Upload Results</h4>
      <div className="space-y-2">
        {uploadResults.map((result, index) => (
          <div key={index} className={`p-3 rounded-lg border ${
            result.success ? 'bg-green-50 border-green-200' : 'bg-red-50 border-red-200'
          }`}>
            <div className="flex items-center gap-2">
              {result.success ? (
                <svg className="w-5 h-5 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                </svg>
              ) : (
                <svg className="w-5 h-5 text-red-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
                </svg>
              )}
              <div className="flex-1">
                <p className={`font-medium text-sm ${result.success ? 'text-green-800' : 'text-red-800'}`}>
                  {result.filename}
                </p>
                {result.success ? (
                  <p className="text-xs text-green-600">
                    ✅ {result.pages_processed} pages processed in {result.processing_time?.toFixed(2)}s
                    {result.status === 'processing' && ' (Processing in background...)'}
                  </p>
                ) : (
                  <p className="text-xs text-red-600">
                    ❌ {result.error}
                  </p>
                )}
              </div>
            </div>
            {result.warnings && result.warnings.length > 0 && (
              <div className="mt-2 text-xs text-yellow-700">
                <strong>Warnings:</strong> {result.warnings.join(', ')}
              </div>
            )}
          </div>
        ))}
      </div>
    </div>
  );
};



// ==================== ./src/components/upload/UploadStatus.tsx ====================
// components/upload/UploadStatus.tsx
import React from 'react';
import { UploadStatus as UploadStatusType } from '../../types';
import { getStatusColor } from '../../utils/helpers';

interface UploadStatusProps {
  uploadStatuses: Map<string, UploadStatusType>;
}

export const UploadStatusComponent: React.FC<UploadStatusProps> = ({ uploadStatuses }) => {
  if (uploadStatuses.size === 0) return null;

  return (
    <div className="mt-6 space-y-3">
      <h4 className="font-medium text-gray-900">Processing Status</h4>
      {Array.from(uploadStatuses.values()).map(status => (
        <div key={status.fileId} className="bg-gray-50 rounded-lg p-4 border border-gray-200">
          <div className="flex items-center justify-between mb-2">
            <span className="font-medium text-gray-900">{status.filename}</span>
            <span className={`text-xs px-2 py-1 rounded-full ${getStatusColor(status.status)}`}>
              {status.status}
            </span>
          </div>
          <p className="text-sm text-gray-600 mb-2">{status.message}</p>
          <div className="bg-gray-200 rounded-full h-2">
            <div 
              className="bg-stone-700 h-2 rounded-full transition-all" 
              style={{ width: `${status.progress}%` }}
            />
          </div>
          <div className="flex items-center justify-between text-xs text-gray-500 mt-1">
            <span>{status.progress}% complete</span>
            {status.pagesProcessed !== undefined && (
              <span>{status.pagesProcessed} pages • {status.chunksCreated} chunks</span>
            )}
          </div>
          {status.status === 'failed' && status.errors && status.errors.length > 0 && (
            <div className="mt-2 text-xs text-red-600">
              {status.errors.join(', ')}
            </div>
          )}
        </div>
      ))}
    </div>
  );
};



// ==================== ./src/components/upload/UploadTab.tsx ====================
// components/upload/UploadTab.tsx
import React from 'react';
import { UploadZone } from './UploadZone';
import { UploadQueue } from './UploadQueue';
import { UploadStatusComponent } from './UploadStatus';
import { UploadResults } from './UploadResults';
import { UploadStatus } from '../../types';

interface UploadTabProps {
  uploadQueue: File[];
  currentlyUploading: File | null;
  uploadProgress: number;
  uploadResults: any[];
  uploadStatuses: Map<string, UploadStatus>;
  isAnalyzing: boolean;
  onFileSelect: (files: FileList | null) => void;
  onRemoveFromQueue: (index: number) => void;
  onClearQueue: () => void;
  onUploadAll: (runAnalysis: boolean) => void;
  onSetActiveTab: (tab: string) => void;
}

export const UploadTab: React.FC<UploadTabProps> = ({
  uploadQueue,
  currentlyUploading,
  uploadProgress,
  uploadResults,
  uploadStatuses,
  isAnalyzing,
  onFileSelect,
  onRemoveFromQueue,
  onClearQueue,
  onUploadAll,
  onSetActiveTab
}) => {
  return (
    <div className="bg-white rounded-2xl shadow-sm border border-gray-100 p-8">
      <div className="flex items-center justify-between mb-6">
        <h2 className="text-2xl font-semibold text-gray-900">Upload & Analyze Documents</h2>
        <div className="text-sm text-gray-500">
          {uploadQueue.length > 0 && `${uploadQueue.length} file${uploadQueue.length !== 1 ? 's' : ''} queued`}
        </div>
      </div>
      
      <div className="max-w-4xl">
        <UploadZone onFileSelect={onFileSelect} />

        <UploadQueue
          uploadQueue={uploadQueue}
          currentlyUploading={currentlyUploading}
          uploadProgress={uploadProgress}
          isAnalyzing={isAnalyzing}
          onRemoveFromQueue={onRemoveFromQueue}
          onClearQueue={onClearQueue}
          onUploadOnly={() => onUploadAll(false)}
          onUploadAndAnalyze={() => onUploadAll(true)}
        />

        <UploadStatusComponent uploadStatuses={uploadStatuses} />
        
        <UploadResults uploadResults={uploadResults} />
        
        {/* Instructions */}
        <div className="mt-8 grid grid-cols-1 md:grid-cols-2 gap-6">
          <div className="p-4 bg-gray-50 rounded-lg">
            <h4 className="font-medium text-gray-900 mb-2">Supported File Types:</h4>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>• <strong>PDF:</strong> Portable Document Format</li>
              <li>• <strong>DOC/DOCX:</strong> Microsoft Word documents</li>
              <li>• <strong>TXT:</strong> Plain text files</li>
              <li>• <strong>RTF:</strong> Rich Text Format</li>
            </ul>
          </div>
          
          <div className="p-4 bg-green-50 rounded-lg">
            <h4 className="font-medium text-gray-900 mb-2">🚀 New Features:</h4>
            <ul className="text-sm text-gray-600 space-y-1">
              <li>• <strong>Real-time Progress:</strong> Track document processing status</li>
              <li>• <strong>Upload & Analyze:</strong> Automatically runs comprehensive analysis</li>
              <li>• <strong>Batch Upload:</strong> Process multiple documents at once</li>
              <li>• <strong>Background Processing:</strong> Large documents process asynchronously</li>
            </ul>
          </div>
        </div>
      </div>
    </div>
  );
};



// ==================== ./src/components/upload/UploadZone.tsx ====================
// components/upload/UploadZone.tsx
import React from 'react';

interface UploadZoneProps {
  onFileSelect: (files: FileList | null) => void;
}

export const UploadZone: React.FC<UploadZoneProps> = ({ onFileSelect }) => {
  return (
    <div className="border-2 border-dashed border-gray-300 rounded-xl p-8 text-center hover:border-gray-400 transition-all">
      <div className="w-16 h-16 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-4">
        <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
        </svg>
      </div>
      
      <h3 className="text-lg font-medium text-gray-900 mb-2">Upload Documents</h3>
      <p className="text-gray-600 mb-4">
        Support for PDF, DOC, DOCX, RTF, and TXT files (max 50MB each)
        <br />
        <strong>Select multiple files and choose to auto-analyze after upload</strong>
      </p>
      
      <input
        type="file"
        onChange={(e) => onFileSelect(e.target.files)}
        accept=".pdf,.doc,.docx,.txt,.rtf"
        className="hidden"
        id="file-upload"
        multiple
      />
      <label
        htmlFor="file-upload"
        className="inline-flex items-center px-6 py-3 border border-transparent text-base font-medium rounded-lg text-white bg-stone-800 hover:bg-stone-900 cursor-pointer transition-all"
      >
        Choose Files
      </label>
    </div>
  );
};



// ==================== ./src/contexts/AuthContext.tsx ====================
// contexts/AuthContext.tsx
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { User } from '../types';
import { TEST_ACCOUNTS } from '../utils/constants';

interface AuthContextType {
  isLoggedIn: boolean;
  currentUser: User | null;
  apiToken: string;
  login: (username: string, password: string) => Promise<{ success: boolean; error?: string }>;
  logout: () => void;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export const useAuth = () => {
  const context = useContext(AuthContext);
  if (!context) {
    throw new Error('useAuth must be used within an AuthProvider');
  }
  return context;
};

interface AuthProviderProps {
  children: ReactNode;
}

export const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {
  const [isLoggedIn, setIsLoggedIn] = useState(false);
  const [currentUser, setCurrentUser] = useState<User | null>(null);
  const [apiToken, setApiToken] = useState('');

  useEffect(() => {
    const savedUser = localStorage.getItem('legalAssistantUser');
    const savedToken = localStorage.getItem('legalAssistantToken');
    
    if (savedUser && savedToken) {
      try {
        const user = JSON.parse(savedUser);
        setCurrentUser(user);
        setApiToken(savedToken);
        setIsLoggedIn(true);
      } catch (error) {
        console.error('Error loading saved session:', error);
        logout();
      }
    }
  }, []);

  const login = async (username: string, password: string): Promise<{ success: boolean; error?: string }> => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000));

    const account = TEST_ACCOUNTS.find(acc => 
      acc.username === username && acc.password === password
    );

    if (account) {
      const user: User = {
        username: account.username,
        email: account.email,
        role: account.role,
        subscription_tier: account.subscription_tier,
        loginTime: new Date().toISOString(),
        user_id: `user_${account.username}`
      };

      const token = `user_${account.username}_${Date.now()}`;

      setCurrentUser(user);
      setApiToken(token);
      setIsLoggedIn(true);
      
      localStorage.setItem('legalAssistantUser', JSON.stringify(user));
      localStorage.setItem('legalAssistantToken', token);

      return { success: true };
    }

    return { success: false, error: 'Invalid username or password. Please try one of the test accounts.' };
  };

  const logout = () => {
    setCurrentUser(null);
    setApiToken('');
    setIsLoggedIn(false);
    localStorage.removeItem('legalAssistantUser');
    localStorage.removeItem('legalAssistantToken');
  };

  return (
    <AuthContext.Provider value={{ isLoggedIn, currentUser, apiToken, login, logout }}>
      {children}
    </AuthContext.Provider>
  );
};



// ==================== ./src/contexts/BackendContext.tsx ====================
// contexts/BackendContext.tsx
import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';
import { BackendCapabilities } from '../types';
import { DEFAULT_BACKEND_URL } from '../utils/constants';
import { useAuth } from './AuthContext';

interface BackendContextType {
  backendUrl: string;
  isBackendConfigured: boolean;
  connectionError: string;
  backendCapabilities: BackendCapabilities;
  testConnection: () => Promise<void>;
}

const BackendContext = createContext<BackendContextType | undefined>(undefined);

export const useBackend = () => {
  const context = useContext(BackendContext);
  if (!context) {
    throw new Error('useBackend must be used within a BackendProvider');
  }
  return context;
};

interface BackendProviderProps {
  children: ReactNode;
}

export const BackendProvider: React.FC<BackendProviderProps> = ({ children }) => {
  const { isLoggedIn, apiToken, currentUser } = useAuth();
  const [backendUrl] = useState(DEFAULT_BACKEND_URL);
  const [isBackendConfigured, setIsBackendConfigured] = useState(false);
  const [connectionError, setConnectionError] = useState('');
  const [backendCapabilities, setBackendCapabilities] = useState<BackendCapabilities>({
    hasChat: false,
    hasDocumentAnalysis: false,
    enhancedRag: false,
    userContainers: false,
    version: '',
    subscriptionTier: 'free'
  });

  const testConnection = async () => {
    if (!backendUrl) {
      setConnectionError('No backend URL configured');
      return;
    }
    
    setConnectionError('Testing connection...');
    
    try {
      const controller = new AbortController();
      const timeoutId = setTimeout(() => controller.abort(), 10000);

      const healthResponse = await fetch(`${backendUrl}/health`, {
        method: 'GET',
        signal: controller.signal,
        headers: {
          'Content-Type': 'application/json',
        }
      });
      
      clearTimeout(timeoutId);

      if (!healthResponse.ok) {
        throw new Error(`Backend returned ${healthResponse.status}: ${healthResponse.statusText}`);
      }

      const healthData = await healthResponse.json();
      
      if (healthData.version && healthData.version.includes("SmartRAG")) {
        setBackendCapabilities({
          hasChat: true,
          hasDocumentAnalysis: true,
          enhancedRag: healthData.components?.enhanced_rag?.enabled || false,
          userContainers: healthData.components?.user_containers?.enabled || false,
          version: healthData.version,
          subscriptionTier: currentUser?.subscription_tier || 'free'
        });
        setIsBackendConfigured(true);
        setConnectionError('');
      } else {
        throw new Error("Backend doesn't support Smart RAG features");
      }
    } catch (error: unknown) {
      console.error('Failed to check backend capabilities:', error);
      setIsBackendConfigured(false);
      
      if (error instanceof Error) {
        if (error.name === 'AbortError') {
          setConnectionError('Connection timeout - backend may be down or slow');
        } else if (error.message.includes('fetch') || error.name === 'TypeError') {
          setConnectionError(`Cannot connect to backend - check if server is running at ${backendUrl}`);
        } else {
          setConnectionError(`Backend error: ${error.message}`);
        }
      } else {
        setConnectionError('Unknown error occurred while connecting to backend');
      }
    }
  };

  useEffect(() => {
    if (isLoggedIn && apiToken) {
      testConnection();
    }
  }, [isLoggedIn, apiToken]);

  return (
    <BackendContext.Provider
      value={{
        backendUrl,
        isBackendConfigured,
        connectionError,
        backendCapabilities,
        testConnection
      }}
    >
      {children}
    </BackendContext.Provider>
  );
};



// ==================== ./src/hooks/useAnalysis.ts ====================
// hooks/useAnalysis.ts
import { useState, useCallback } from 'react';
import { AnalysisResult, DocumentAnalysis } from '../types';
import { ApiService } from '../services/api';
import { ANALYSIS_TOOLS } from '../utils/constants';

export const useAnalysis = (
  apiService: ApiService,
  documentAnalyses: DocumentAnalysis[],
  setDocumentAnalyses: React.Dispatch<React.SetStateAction<DocumentAnalysis[]>>,
  sessionId: string,
  currentUserId?: string
) => {
  const [analysisResults, setAnalysisResults] = useState<AnalysisResult[]>([]);
  const [isAnalyzing, setIsAnalyzing] = useState(false);
  const [selectedDocumentForAnalysis, setSelectedDocumentForAnalysis] = useState<string | null>(null);

  const runComprehensiveDocumentAnalysis = useCallback(async (documentId: string) => {
    const document = documentAnalyses.find(d => d.id === documentId);
    if (!document) return;

    setIsAnalyzing(true);

    const processingResult: AnalysisResult = {
      id: Date.now() + Math.random(),
      toolId: 'comprehensive',
      toolTitle: 'Complete Document Analysis',
      document: document.filename,
      documentId: documentId,
      analysis: 'Running comprehensive analysis including summary, clauses, risks, timeline, obligations, and missing clauses...',
      timestamp: new Date().toLocaleString(),
      status: 'processing',
      sources: [],
      analysisType: 'comprehensive'
    };
    
    setAnalysisResults(prev => [processingResult, ...prev]);

    try {
      const requestBody = {
        document_id: documentId,
        analysis_types: ['comprehensive'],
        user_id: currentUserId || "default_user",
        session_id: sessionId,
        response_style: "detailed"
      };

      const data = await apiService.post<any>('/comprehensive-analysis', requestBody);
      
      const analysisText = `# Comprehensive Legal Document Analysis

## Document Summary
${data.document_summary || 'No summary available'}

## Key Clauses Analysis
${data.key_clauses || 'No clauses analysis available'}

## Risk Assessment
${data.risk_assessment || 'No risk assessment available'}

## Timeline & Deadlines
${data.timeline_deadlines || 'No timeline information available'}

## Party Obligations
${data.party_obligations || 'No obligations analysis available'}

## Missing Clauses Analysis
${data.missing_clauses || 'No missing clauses analysis available'}`;

      setAnalysisResults(prev => prev.map(r => 
        r.id === processingResult.id 
          ? {
              ...r,
              analysis: analysisText,
              confidence: data.overall_confidence || 0.8,
              status: 'completed',
              sources: data.sources_by_section?.summary || [],
              warnings: data.warnings || []
            }
          : r
      ));

      setDocumentAnalyses(prev => prev.map(d => 
        d.id === documentId 
          ? {
              ...d,
              analysisResults: {
                summary: data.document_summary,
                clauses: data.key_clauses,
                risks: data.risk_assessment,
                timeline: data.timeline_deadlines,
                obligations: data.party_obligations,
                missingClauses: data.missing_clauses
              },
              lastAnalyzed: new Date().toISOString(),
              confidence: data.overall_confidence || 0.8
            }
          : d
      ));

    } catch (error) {
      console.error('Comprehensive analysis failed:', error);
      
      let errorMessage = 'Comprehensive analysis failed';
      if (error instanceof Error) {
        errorMessage = `Analysis failed: ${error.message}`;
      }
      
      setAnalysisResults(prev => prev.map(r => 
        r.id === processingResult.id 
          ? {
              ...r,
              analysis: errorMessage,
              status: 'failed',
              warnings: ['Make sure the document was uploaded successfully and you have proper access.']
            }
          : r
      ));
    } finally {
      setIsAnalyzing(false);
    }
  }, [documentAnalyses, apiService, sessionId, currentUserId, setDocumentAnalyses]);

  const runAnalysis = useCallback(async (toolId: string, documentId?: string, useEnhancedRag: boolean = true) => {
    const tool = ANALYSIS_TOOLS.find(t => t.id === toolId);
    if (!tool) return;

    if (tool.isComprehensive) {
      if (documentId) {
        await runComprehensiveDocumentAnalysis(documentId);
      } else {
        for (const doc of documentAnalyses) {
          await runComprehensiveDocumentAnalysis(doc.id);
        }
      }
      return;
    }

    setIsAnalyzing(true);

    const targetDoc = documentId ? documentAnalyses.find(d => d.id === documentId) : null;
    const docName = targetDoc ? targetDoc.filename : "User Documents";

    const processingResult: AnalysisResult = {
      id: Date.now() + Math.random(),
      toolId: toolId,
      toolTitle: tool.title,
      document: docName,
      documentId: documentId || 'all',
      analysis: `Running ${tool.title.toLowerCase()} on ${docName}...`,
      timestamp: new Date().toLocaleString(),
      status: 'processing',
      sources: [],
      analysisType: toolId
    };
    
    setAnalysisResults(prev => [processingResult, ...prev]);

    try {
      const requestBody = {
        question: tool.prompt,
        session_id: sessionId || undefined,
        response_style: "detailed",
        search_scope: documentId ? "user_only" : "user_only",
        use_enhanced_rag: useEnhancedRag
      };

      const data = await apiService.post<any>('/ask', requestBody);
      
      const analysisText = data.response || 'Analysis could not be completed.';
      const status = data.error ? 'failed' : 'completed';
      
      setAnalysisResults(prev => prev.map(r => 
        r.id === processingResult.id 
          ? {
              ...r,
              analysis: analysisText,
              confidence: data.confidence_score || 0.7,
              status: status,
              sources: data.sources || [],
              warnings: data.error ? [data.error] : []
            }
          : r
      ));

    } catch (error) {
      console.error('Analysis failed:', error);
      
      let errorMessage = 'Analysis failed';
      if (error instanceof Error) {
        errorMessage = `Analysis failed: ${error.message}`;
      }
      
      setAnalysisResults(prev => prev.map(r => 
        r.id === processingResult.id 
          ? {
              ...r,
              analysis: errorMessage,
              status: 'failed',
              warnings: ['Make sure you have uploaded documents and have proper authentication.']
            }
          : r
      ));
    } finally {
      setIsAnalyzing(false);
    }
  }, [documentAnalyses, apiService, sessionId, runComprehensiveDocumentAnalysis]);

  const downloadResult = useCallback((resultId: number, currentUser: any) => {
    const result = analysisResults.find(r => r.id === resultId);
    if (!result) return;

    const content = `Legal Document Analysis Report
Generated: ${result.timestamp}
Analysis Type: ${result.toolTitle}
Document: ${result.document}
User: ${currentUser?.username}
Status: ${result.status}
Confidence Score: ${result.confidence ? Math.round(result.confidence * 100) + '%' : 'N/A'}

ANALYSIS RESULTS:
${result.analysis}

${result.extractedData ? '\nEXTRACTED DATA:\n' + JSON.stringify(result.extractedData, null, 2) : ''}
${result.warnings && result.warnings.length > 0 ? '\nWARNINGS:\n' + result.warnings.join('\n') : ''}

---
Generated by Legally — powered by AI
User: ${currentUser?.username} (${currentUser?.subscription_tier})
This analysis is for informational purposes only and does not constitute legal advice.`;

    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `legal-analysis-${result.toolId}-${Date.now()}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  }, [analysisResults]);

  const clearResults = useCallback(() => {
    setAnalysisResults([]);
  }, []);

  return {
    analysisResults,
    isAnalyzing,
    selectedDocumentForAnalysis,
    setSelectedDocumentForAnalysis,
    runAnalysis,
    runComprehensiveDocumentAnalysis,
    downloadResult,
    clearResults
  };
};



// ==================== ./src/hooks/useChat.ts ====================
// hooks/useChat.ts
import { useState, useCallback } from 'react';
import { Message } from '../types';
import { ApiService } from '../services/api';

export const useChat = (apiService: ApiService) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [isLoading, setIsLoading] = useState(false);
  const [sessionId, setSessionId] = useState('');

  const sendMessage = useCallback(async (
    input: string,
    responseStyle: string,
    searchScope: string,
    useEnhancedRag: boolean,
    expandRequest: boolean = false
  ) => {
    if (!input.trim() || isLoading) return;

    const userMessage: Message = { from: 'user', text: input };
    setMessages(prev => [...prev, userMessage]);
    setIsLoading(true);

    try {
      const requestBody = {
        question: expandRequest ? `Please provide more detailed information about: ${input}` : input,
        session_id: sessionId || undefined,
        response_style: responseStyle,
        search_scope: searchScope,
        use_enhanced_rag: useEnhancedRag
      };

      const data = await apiService.post<any>('/ask', requestBody);
      
      if (data.session_id && !sessionId) {
        setSessionId(data.session_id);
      }

      const botText = data.response || data.error || 'No response received from server';
      const botMessage: Message = { 
        from: 'bot', 
        text: botText,
        confidence: data.confidence_score,
        expandAvailable: data.expand_available,
        sources: data.sources || []
      };
      setMessages(prev => [...prev, botMessage]);
    } catch (error) {
      console.error('Chat error:', error);
      let errorMessage = 'Failed to connect to server.';
      
      if (error instanceof Error) {
        if (error.name === 'AbortError') {
          errorMessage = 'Request timed out - the server may be busy.';
        } else if (error.message.includes('fetch')) {
          errorMessage = 'Network error - check your connection.';
        } else {
          errorMessage = `Error: ${error.message}`;
        }
      }
      
      const botMessage: Message = { from: 'bot', text: errorMessage };
      setMessages(prev => [...prev, botMessage]);
    } finally {
      setIsLoading(false);
    }
  }, [apiService, isLoading, sessionId]);

  const clearMessages = useCallback(() => {
    setMessages([]);
    setSessionId('');
  }, []);

  const addWelcomeMessage = useCallback((username: string) => {
    setMessages([{
      from: 'bot',
      text: `Welcome back, ${username}! I'm Legally, your AI-powered legal document assistant. How can I help you today?`
    }]);
  }, []);

  return {
    messages,
    isLoading,
    sessionId,
    sendMessage,
    clearMessages,
    addWelcomeMessage
  };
};



// ==================== ./src/hooks/useDocuments.ts ====================
// hooks/useDocuments.ts
import { useState, useCallback, useEffect } from 'react';
import { DocumentAnalysis, UploadStatus } from '../types';
import { ApiService } from '../services/api';
import { validateFileBeforeUpload } from '../utils/fileValidation';

export const useDocuments = (apiService: ApiService, isBackendConfigured: boolean) => {
  const [userDocuments, setUserDocuments] = useState<any[]>([]);
  const [documentAnalyses, setDocumentAnalyses] = useState<DocumentAnalysis[]>([]);
  const [uploadQueue, setUploadQueue] = useState<File[]>([]);
  const [currentlyUploading, setCurrentlyUploading] = useState<File | null>(null);
  const [uploadProgress, setUploadProgress] = useState(0);
  const [uploadResults, setUploadResults] = useState<any[]>([]);
  const [uploadStatuses, setUploadStatuses] = useState<Map<string, UploadStatus>>(new Map());
  const [statusCheckIntervals, setStatusCheckIntervals] = useState<Map<string, NodeJS.Timeout>>(new Map());

  // Cleanup intervals on unmount
  useEffect(() => {
    return () => {
      statusCheckIntervals.forEach(interval => clearInterval(interval));
    };
  }, [statusCheckIntervals]);

  const loadUserDocuments = useCallback(async () => {
    if (!isBackendConfigured) return;

    try {
      const data = await apiService.get<any>('/user/documents');
      setUserDocuments(data.documents || []);
      
      const docAnalyses = (data.documents || []).map((doc: any) => ({
        id: doc.file_id,
        filename: doc.filename,
        uploadedAt: doc.uploaded_at,
        pagesProcessed: doc.pages_processed,
        analysisResults: {},
        lastAnalyzed: null,
        confidence: null
      }));
      setDocumentAnalyses(docAnalyses);
    } catch (error) {
      console.error('Failed to load user documents:', error);
    }
  }, [apiService, isBackendConfigured]);

  const checkDocumentStatus = useCallback(async (fileId: string): Promise<UploadStatus | null> => {
    try {
      const data = await apiService.get<any>(`/user/documents/${fileId}/status`);
      return {
        fileId: data.file_id,
        filename: data.filename,
        status: data.status,
        progress: data.progress || 0,
        message: data.message || '',
        pagesProcessed: data.pages_processed,
        chunksCreated: data.chunks_created,
        processingTime: data.processing_time,
        errors: data.errors || []
      };
    } catch (error) {
      console.error('Status check error:', error);
      return null;
    }
  }, [apiService]);

  const startProgressTracking = useCallback((fileId: string, filename: string) => {
    const initialStatus: UploadStatus = {
      fileId,
      filename,
      status: 'uploading',
      progress: 0,
      message: 'Uploading document...'
    };
    
    setUploadStatuses(prev => new Map(prev).set(fileId, initialStatus));

    const interval = setInterval(async () => {
      const status = await checkDocumentStatus(fileId);
      
      if (status) {
        setUploadStatuses(prev => new Map(prev).set(fileId, status));
        
        if (status.status === 'completed' || status.status === 'failed') {
          clearInterval(interval);
          setStatusCheckIntervals(prev => {
            const newMap = new Map(prev);
            newMap.delete(fileId);
            return newMap;
          });
          
          if (status.status === 'completed') {
            setTimeout(() => {
              setUploadStatuses(prev => {
                const newMap = new Map(prev);
                newMap.delete(fileId);
                return newMap;
              });
            }, 5000);
          }
        }
      }
    }, 2000);

    setStatusCheckIntervals(prev => new Map(prev).set(fileId, interval));

    setTimeout(() => {
      if (statusCheckIntervals.has(fileId)) {
        clearInterval(interval);
        setStatusCheckIntervals(prev => {
          const newMap = new Map(prev);
          newMap.delete(fileId);
          return newMap;
        });
        
        setUploadStatuses(prev => new Map(prev).set(fileId, {
          ...initialStatus,
          status: 'failed',
          message: 'Document processing timed out',
          errors: ['Processing took too long']
        }));
      }
    }, 5 * 60 * 1000);
  }, [checkDocumentStatus, statusCheckIntervals]);

  const handleFileUpload = useCallback((files: FileList | null) => {
    if (!files) return;

    const fileArray = Array.from(files);
    const validFiles: File[] = [];
    const errors: string[] = [];

    fileArray.forEach(file => {
      const validationError = validateFileBeforeUpload(file);
      if (validationError) {
        errors.push(validationError);
      } else {
        validFiles.push(file);
      }
    });

    if (errors.length > 0) {
      alert('Some files had issues:\n\n' + errors.join('\n\n'));
    }

    if (validFiles.length > 0) {
      setUploadQueue(prev => [...prev, ...validFiles]);
    }
  }, []);

  const uploadAllDocuments = useCallback(async (runAnalysisAfter = false): Promise<string[]> => {
    if (uploadQueue.length === 0) return [];

    setUploadResults([]);
    const results: any[] = [];
    const uploadedDocIds: string[] = [];

    for (let i = 0; i < uploadQueue.length; i++) {
      const file = uploadQueue[i];
      setCurrentlyUploading(file);
      setUploadProgress(((i) / uploadQueue.length) * 100);

      try {
        const formData = new FormData();
        formData.append('file', file);

        const data = await apiService.uploadFile('/user/upload', formData);
        
        if (data.status === 'processing' && data.file_id) {
          startProgressTracking(data.file_id, file.name);
        }
        
        results.push({
          filename: file.name,
          success: true,
          pages_processed: data.pages_processed,
          file_id: data.file_id,
          processing_time: data.processing_time,
          warnings: data.warnings || [],
          status: data.status
        });

        uploadedDocIds.push(data.file_id);
      } catch (error) {
        console.error(`Upload failed for ${file.name}:`, error);
        
        let errorMessage = 'Upload failed';
        if (error instanceof Error) {
          errorMessage = error.message;
        }
        
        results.push({
          filename: file.name,
          success: false,
          error: errorMessage
        });
      }
    }

    setUploadProgress(100);
    setUploadResults(results);
    setCurrentlyUploading(null);
    setUploadQueue([]);
    
    setTimeout(async () => {
      await loadUserDocuments();
    }, 3000);

    return uploadedDocIds;
  }, [uploadQueue, apiService, startProgressTracking, loadUserDocuments]);

  const deleteDocument = useCallback(async (fileId: string) => {
    try {
      await apiService.delete(`/user/documents/${fileId}`);
      await loadUserDocuments();
      alert('Document deleted successfully');
    } catch (error) {
      console.error('Delete failed:', error);
      alert(`Delete failed: ${error instanceof Error ? error.message : 'Unknown error'}`);
    }
  }, [apiService, loadUserDocuments]);

  const removeFromQueue = useCallback((index: number) => {
    setUploadQueue(prev => prev.filter((_, i) => i !== index));
  }, []);

  const clearQueue = useCallback(() => {
    setUploadQueue([]);
    setUploadResults([]);
  }, []);

  const clearStatuses = useCallback(() => {
    statusCheckIntervals.forEach(interval => clearInterval(interval));
    setStatusCheckIntervals(new Map());
    setUploadStatuses(new Map());
  }, [statusCheckIntervals]);

  return {
    userDocuments,
    documentAnalyses,
    uploadQueue,
    currentlyUploading,
    uploadProgress,
    uploadResults,
    uploadStatuses,
    setDocumentAnalyses,
    loadUserDocuments,
    handleFileUpload,
    uploadAllDocuments,
    deleteDocument,
    removeFromQueue,
    clearQueue,
    clearStatuses
  };
};



// ==================== ./src/main.tsx ====================
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)



// ==================== ./src/services/api.ts ====================
// services/api.ts
export class ApiService {
  private baseUrl: string;
  private apiToken: string;

  constructor(baseUrl: string, apiToken: string) {
    this.baseUrl = baseUrl;
    this.apiToken = apiToken;
  }

  private async request<T>(
    endpoint: string,
    options: RequestInit = {}
  ): Promise<T> {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 30000); // 30s timeout

    try {
      const response = await fetch(`${this.baseUrl}${endpoint}`, {
        ...options,
        signal: controller.signal,
        headers: {
          'Authorization': `Bearer ${this.apiToken}`,
          'Content-Type': 'application/json',
          ...options.headers,
        },
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`API Error ${response.status}: ${errorText || response.statusText}`);
      }

      return response.json();
    } catch (error) {
      clearTimeout(timeoutId);
      throw error;
    }
  }

  async get<T>(endpoint: string): Promise<T> {
    return this.request<T>(endpoint, { method: 'GET' });
  }

  async post<T>(endpoint: string, data?: any): Promise<T> {
    return this.request<T>(endpoint, {
      method: 'POST',
      body: data ? JSON.stringify(data) : undefined,
    });
  }

  async delete<T>(endpoint: string): Promise<T> {
    return this.request<T>(endpoint, { method: 'DELETE' });
  }

  async uploadFile(endpoint: string, formData: FormData): Promise<any> {
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 300000); // 5min for uploads

    try {
      const response = await fetch(`${this.baseUrl}${endpoint}`, {
        method: 'POST',
        signal: controller.signal,
        headers: {
          'Authorization': `Bearer ${this.apiToken}`,
        },
        body: formData,
      });

      clearTimeout(timeoutId);

      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`Upload failed (${response.status}): ${errorText || response.statusText}`);
      }

      return response.json();
    } catch (error) {
      clearTimeout(timeoutId);
      throw error;
    }
  }
}



// ==================== ./src/types/index.ts ====================
// types/index.ts
export type Message = {
  from: "user" | "bot";
  text: string;
  confidence?: number;
  expandAvailable?: boolean;
  sources?: any[];
};

export type AnalysisResult = {
  id: number;
  toolId: string;
  toolTitle: string;
  document: string;
  documentId: string;
  analysis: string;
  confidence?: number;
  timestamp: string;
  sources?: any[];
  status: 'completed' | 'failed' | 'processing';
  extractedData?: any;
  warnings?: string[];
  analysisType: string;
};

export type DocumentAnalysis = {
  id: string;
  filename: string;
  uploadedAt: string;
  pagesProcessed: number;
  analysisResults: {
    summary?: string;
    clauses?: string;
    risks?: string;
    timeline?: string;
    obligations?: string;
    missingClauses?: string;
  };
  lastAnalyzed?: string;
  confidence?: number;
};

export type User = {
  username: string;
  email?: string;
  role: string;
  subscription_tier: string;
  loginTime: string;
  user_id?: string;
};

export type UploadStatus = {
  fileId: string;
  filename: string;
  status: 'uploading' | 'processing' | 'completed' | 'failed';
  progress: number;
  message: string;
  pagesProcessed?: number;
  chunksCreated?: number;
  processingTime?: number;
  errors?: string[];
};

export type BackendCapabilities = {
  hasChat: boolean;
  hasDocumentAnalysis: boolean;
  enhancedRag: boolean;
  userContainers: boolean;
  version: string;
  subscriptionTier: string;
};

export type AnalysisTool = {
  id: string;
  title: string;
  description: string;
  prompt: string;
  icon: string;
  category: string;
  idealFor: string[];
  riskLevel: string;
  isComprehensive?: boolean;
};



// ==================== ./src/utils/constants.ts ====================
// utils/constants.ts
import { AnalysisTool } from '../types';

export const ANALYSIS_TOOLS: AnalysisTool[] = [
  {
    id: 'comprehensive',
    title: 'Complete Document Analysis',
    description: 'Run all analysis tools at once for comprehensive insights',
    prompt: 'Provide a comprehensive legal analysis including: summary, key clauses, risks, timeline, obligations, and missing clauses.',
    icon: '🔍',
    category: 'Complete',
    idealFor: ['Any legal document'],
    riskLevel: 'low',
    isComprehensive: true
  },
  {
    id: 'summarize',
    title: 'Legal Document Summarization',
    description: 'Get plain English summaries while keeping legal tone intact',
    prompt: 'Summarize this legal document in plain English, keeping the legal tone intact. Highlight purpose, parties involved, and key terms.',
    icon: '📄',
    category: 'Analysis',
    idealFor: ['Contracts', 'Case briefs', 'Discovery documents'],
    riskLevel: 'low'
  },
  {
    id: 'extract-clauses',
    title: 'Key Clause Extraction',
    description: 'Extract termination, indemnification, liability clauses automatically',
    prompt: 'Extract and list the clauses related to termination, indemnification, liability, governing law, and confidentiality.',
    icon: '📋',
    category: 'Extraction',
    idealFor: ['NDAs', 'Employment agreements', 'Service contracts'],
    riskLevel: 'low'
  },
  {
    id: 'missing-clauses',
    title: 'Missing Clause Detection',
    description: 'Flag commonly expected clauses that might be missing',
    prompt: 'Analyze this contract and flag any commonly expected legal clauses that are missing, such as limitation of liability or dispute resolution.',
    icon: '⚠️',
    category: 'Risk Assessment',
    idealFor: ['Startup contracts', 'Vendor agreements'],
    riskLevel: 'medium'
  },
  {
    id: 'risk-flagging',
    title: 'Legal Risk Flagging',
    description: 'Identify clauses that may pose legal risks to signing party',
    prompt: 'Identify any clauses that may pose legal risks to the signing party, such as unilateral termination, broad indemnity, or vague obligations.',
    icon: '🚩',
    category: 'Risk Assessment',
    idealFor: ['Lease agreements', 'IP transfer agreements'],
    riskLevel: 'high'
  },
  {
    id: 'timeline-extraction',
    title: 'Timeline & Deadline Extraction',
    description: 'Extract all dates, deadlines, and renewal periods',
    prompt: 'Extract and list all dates, deadlines, renewal periods, and notice periods mentioned in this document.',
    icon: '📅',
    category: 'Extraction',
    idealFor: ['Leases', 'Licensing deals'],
    riskLevel: 'low'
  },
  {
    id: 'obligations',
    title: 'Obligation Summary',
    description: 'List all required actions and obligations with deadlines',
    prompt: 'List all actions or obligations the signing party is required to perform, along with associated deadlines or conditions.',
    icon: '✅',
    category: 'Analysis',
    idealFor: ['Service contracts', 'Compliance agreements'],
    riskLevel: 'low'
  }
];

export const TEST_ACCOUNTS = [
  { username: 'demo', password: 'demo123', email: 'demo@legalassistant.ai', role: 'user', subscription_tier: 'free' },
  { username: 'tester1', password: 'test123', email: 'tester1@company.com', role: 'user', subscription_tier: 'premium' },
  { username: 'tester2', password: 'test456', email: 'tester2@company.com', role: 'user', subscription_tier: 'free' },
  { username: 'lawyer1', password: 'legal123', email: 'lawyer1@lawfirm.com', role: 'user', subscription_tier: 'premium' }
];

export const DEFAULT_BACKEND_URL = "https://download-configuration-indicators-apartment.trycloudflare.com";



// ==================== ./src/utils/fileValidation.ts ====================
// utils/fileValidation.ts
export const validateFileBeforeUpload = (file: File): string | null => {
  const maxSize = 50 * 1024 * 1024; // 50MB
  const allowedTypes = [
    'application/pdf',
    'application/msword',
    'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
    'text/plain',
    'application/rtf'
  ];
  
  if (file.size > maxSize) {
    return `File "${file.name}" is too large: ${(file.size / 1024 / 1024).toFixed(2)}MB. Maximum allowed: 50MB`;
  }
  
  if (!allowedTypes.includes(file.type)) {
    const extension = '.' + (file.name.split('.').pop()?.toLowerCase() || '');
    return `File "${file.name}" has unsupported type: ${extension}. Allowed: PDF, DOC, DOCX, RTF, TXT`;
  }
  
  return null; // No errors
};



// ==================== ./src/utils/helpers.ts ====================
// utils/helpers.ts
export const getStatusColor = (status: string): string => {
  switch (status) {
    case 'completed': return 'bg-emerald-100 text-emerald-800';
    case 'failed': return 'bg-rose-100 text-rose-800';
    case 'processing': return 'bg-amber-100 text-amber-800';
    default: return 'bg-gray-100 text-gray-800';
  }
};

export const getSubscriptionBadgeClass = (tier: string): string => {
  const colors: Record<string, string> = {
    free: 'bg-stone-100 text-stone-700',
    premium: 'bg-amber-100 text-amber-700'
  };
  return colors[tier] || colors.free;
};



// ==================== ./src/utils/markdown.ts ====================
// utils/markdown.ts
export const renderMarkdown = (text: string): string => {
  return text
    .replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
    .replace(/\*(.*?)\*/g, '<em>$1</em>')
    .replace(/^### (.*$)/gm, '<h3>$1</h3>')
    .replace(/^## (.*$)/gm, '<h2>$1</h2>')
    .replace(/^# (.*$)/gm, '<h1>$1</h1>')
    .replace(/\n\n/g, '</p><p>')
    .replace(/\n/g, '<br/>')
    .replace(/^/, '<p>')
    .replace(/$/, '</p>')
    .replace(/^\* (.*$)/gm, '<li>$1</li>')
    .replace(/(<li>.*?<\/li>)/g, '<ul>$1</ul>')
    .replace(/^\d+\. (.*$)/gm, '<li>$1</li>')
    .replace(/(<li>.*?<\/li>)/g, '<ol>$1</ol>')
    .replace(/`([^`]+)`/g, '<code>$1</code>')
    .replace(/\[([^\]]+)\]\(([^)]+)\)/g, '<a href="$2" target="_blank" rel="noopener noreferrer">$1</a>');
};



// ==================== ./src/vite-env.d.ts ====================
/// <reference types="vite/client" />



(venv) ubuntu@ip-172-31-28-197:~/RAG-chatbot/frontend$ (venv) ubuntu@ip-172-31-28-197:~/RAG-chatbot/frontend$ venv) ubuntu@i(venv) ubuntu@ip-172-31-28-197:~/RAG-chatbot/frontend$ venv) ubuntu@i(venv) ubuntu@ip-172-31-28-197:~/RAG-chatbot/frontend$ venv) ubuntu@i(venv) ubuntu@ip-172-31-28-197:~/RAG-chatbot/frontend$ venv) ubuntu@i(venv) ubuntu@ip-172-31-28-197:~/RAG-chatbot/frontend$ venv) ubuntu@i(venv) ubuntu@ip-172-31-28-197:~/RAG-chatbot/frontend$ venv) ubuntu@i(venv) ubuntu@ip-172-31-28-197:~/RAG-chatbot/frontend$ venv) ubuntu@i(venv) ubuntu@ip-172-31-28-197:~/RAG-chatbot/frontend$ venv) ubuntu@i(venv) ubuntu@ip-172-31-28-197:~
Claude
